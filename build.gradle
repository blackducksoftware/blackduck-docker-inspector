import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories { 
        mavenCentral() 
        jcenter()
        }
    dependencies { 
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE") 
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
        }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'

compileJava.options.encoding = 'UTF-8'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile) { options.encoding = 'UTF-8' }

group = 'com.blackducksoftware.integration'
version = '3.0.0-SNAPSHOT'
description = ''
String hubDockerImageName = 'hub-docker-inspector'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def linuxFlavorsDpkg = ["ubuntu:16.04"]
def linuxFlavorsRpm = ["centos:7.3.1611"]
def linuxFlavorsApk = ["alpine:3.5"]
def linuxFlavors = linuxFlavorsDpkg + linuxFlavorsRpm + linuxFlavorsApk

Properties applicationProperties = new Properties()
applicationProperties.load(new FileInputStream("src/main/resources/application.properties"))
String hubDockerPgmDir = '/opt/blackduck/hub-docker-inspector'

springBoot { mainClass = 'com.blackducksoftware.integration.hub.docker.Application' }

sourceSets {
	main {
		resources {
			srcDirs = ['src/main/resources']
			includes = ['*.properties']
		}
	}
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/groovy')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task writeVersionToPropertiesFile() {
	doLast {
		println '\tGenerating version properties file'
		Properties versionProperties = new Properties()
		File versionPropertiesFile = new File('src/main/resources/version.properties')
		versionPropertiesFile.delete()
		versionPropertiesFile.createNewFile()
		versionProperties.setProperty('program.version', version)
		versionProperties.store(versionPropertiesFile.newWriter(), null)
	}
}

task produceFinalZip(type: Zip, dependsOn: [build, writeVersionToPropertiesFile]) {
    from("${buildDir}/libs") { include '*.jar' }
    from("${projectDir}/src/main/resources") {
        include 'application.properties'
        into 'config'
    }
}

String getNameWithoutVersion(String linuxFlavor) {
    String linuxFlavorDirName = linuxFlavor
    int colonIndex = linuxFlavor.indexOf(':')
    if (colonIndex >= 0) {
        linuxFlavorDirName = linuxFlavor.subSequence(0, colonIndex)
    }
    linuxFlavorDirName
}

task createAddZipTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        println "linuxFlavorDirName: ${linuxFlavorDirName}"
        task "addFinalZipTo${linuxFlavorDirName}ImageBuildDir"(type: Copy, dependsOn: produceFinalZip) {
            def zipFile = file("${buildDir}/distributions/${project.name}-${version}.zip")
            def outputDir = file("${buildDir}/images/${linuxFlavorDirName}/${hubDockerImageName}")
            from zipTree(zipFile)
            into outputDir
        }
    }
}

task fixJarVersionInScript(type: Copy) {
	from 'src/main/resources/hub-docker-inspector-launcher.sh'
	into 'build'
	filter(ReplaceTokens, tokens: [VERSION: version])
}

task fixJarVersionInMainScript(type: Copy) {
	from 'src/main/resources/hub-docker-inspector.sh'
	into 'build'
	filter(ReplaceTokens, tokens: [VERSION: version])
}

task createAddBashScriptTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        task "addBashScriptTo${linuxFlavorDirName}ImageBuildDir"(type: Copy, dependsOn: [build, fixJarVersionInScript, fixJarVersionInMainScript]) {
            from 'build/hub-docker-inspector-launcher.sh'
            into "${buildDir}/images/${linuxFlavorDirName}/${hubDockerImageName}"
        }
    }
}


task "addApplicationPropertiesFileToUbuntuImageBuildDir"(type: Copy, dependsOn: build) {
			from 'src/main/resources/application.properties'
			into "${buildDir}/images/ubuntu/${hubDockerImageName}/template"
}

task createApkDockerfileTasks() {
    linuxFlavorsApk.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        task "create${linuxFlavorDirName}Dockerfile"(type: Dockerfile) {
            destFile = project.file("${buildDir}/images/${linuxFlavorDirName}/${hubDockerImageName}/Dockerfile")
            println "destFile: ${destFile}"
            from linuxFlavor
            maintainer 'Black Duck Software'
            environmentVariable('LANG', 'en_US.UTF-8')
			
            runCommand 'apk update && apk add bash && apk add openjdk8-jre'
            
            runCommand 'mkdir /opt'
            runCommand 'mkdir /opt/blackduck'
            runCommand "mkdir ${hubDockerPgmDir}"
            runCommand "mkdir ${hubDockerPgmDir}/config"
            runCommand "mkdir ${hubDockerPgmDir}/working"
            runCommand "mkdir ${hubDockerPgmDir}/target"
			runCommand "mkdir ${hubDockerPgmDir}/output"
            addFile('config', "${hubDockerPgmDir}/config")
            addFile("${project.name}-${version}.jar", "/opt/blackduck/${hubDockerImageName}")
            addFile("hub-docker-inspector-launcher.sh", "/opt/blackduck/${hubDockerImageName}")
            runCommand "chmod u+x ${hubDockerPgmDir}/*.sh"
        }
    }
}

task createRpmDockerfileTasks() {
    linuxFlavorsRpm.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        task "create${linuxFlavorDirName}Dockerfile"(type: Dockerfile) {
            destFile = project.file("${buildDir}/images/${linuxFlavorDirName}/${hubDockerImageName}/Dockerfile")
            println "destFile: ${destFile}"
            from linuxFlavor
            maintainer 'Black Duck Software'
			environmentVariable('LANG', 'en_US.UTF-8')
			
            runCommand 'yum update -y && yum install -y java-1.8.0-openjdk && yum clean all -y'
            
            runCommand 'mkdir /opt/blackduck'
            runCommand "mkdir ${hubDockerPgmDir}"
            runCommand "mkdir ${hubDockerPgmDir}/config"
            runCommand "mkdir ${hubDockerPgmDir}/working"
            runCommand "mkdir ${hubDockerPgmDir}/target"
			runCommand "mkdir ${hubDockerPgmDir}/output"
            addFile('config', "${hubDockerPgmDir}/config")
            addFile("${project.name}-${version}.jar", "/opt/blackduck/${hubDockerImageName}")
            addFile("hub-docker-inspector-launcher.sh", "/opt/blackduck/${hubDockerImageName}")
            runCommand "chmod u+x ${hubDockerPgmDir}/*.sh"
        }
    }
}

task removeTestImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "blackducksoftware/centos_minus_vim_plus_bacula:1.0"
}

task removeTestBaseImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "centos:7.3.1611"
}

task createTestDockerfile(type: Dockerfile) {
	destFile = project.file("${buildDir}/images/test/centos_minus_vim_plus_bacula/Dockerfile")
	println "destFile: ${destFile}"
	from 'centos:7.3.1611'
	maintainer 'Black Duck Software'
	environmentVariable('LANG', 'en_US.UTF-8')
	
	runCommand 'rpm -e vim-minimal && \
        yum install -y bacula-director-5.2.13-23.1.el7 bacula-storage-5.2.13-23.1.el7 bacula-client-5.2.13-23.1.el7 \
        bacula-console-5.2.13-23.1.el7'
}

task buildTestDockerImage(type: Exec, dependsOn: [removeTestBaseImage, removeTestImage, createTestDockerfile]) {
	commandLine "docker", "build", "--no-cache", "--tag", "blackducksoftware/centos_minus_vim_plus_bacula:1.0", \
        "${buildDir}/images/test/centos_minus_vim_plus_bacula"
}

task buildTestDockerTarfile(type: Exec, dependsOn: buildTestDockerImage) {
    outputs.files file("${buildDir}/images/test/centos_minus_vim_plus_bacula.tar")
	commandLine "docker", "save", "-o", "${buildDir}/images/test/centos_minus_vim_plus_bacula.tar", \
        "blackducksoftware/centos_minus_vim_plus_bacula:1.0"
}

task createWhTestDockerfile(type: Dockerfile) {
    destFile = project.file("${buildDir}/images/test/whiteouttest/Dockerfile")
    println "destFile: ${destFile}"
    from 'ubuntu:16.04'
    maintainer 'Black Duck Software'
    environmentVariable('LANG', 'en_US.UTF-8')
    
    runCommand 'apt-get update && apt-get -y install curl=7.47.0-1ubuntu2.2 && apt-get -y remove curl && apt-get -y clean'
}

task removeWhImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "blackducksoftware/whiteouttest:1.0"
}

task removeWhBaseImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "ubuntu:16.04"
}

task listImages(type: Exec) {
    commandLine "docker", "images"
}

task buildWhTestDockerImage(type: Exec, dependsOn: [removeWhBaseImage, removeWhImage, listImages, createWhTestDockerfile]) {
    commandLine "docker", "build", "--no-cache", "--tag", "blackducksoftware/whiteouttest:1.0", "${buildDir}/images/test/whiteouttest"
}

task buildWhTestDockerTarfile(type: Exec, dependsOn: buildWhTestDockerImage) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/whiteouttest.tar", "blackducksoftware/whiteouttest:1.0"
}

task removeAlpineImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "alpine:latest"
}

task pullAlpineLatest(type: Exec) {
    commandLine "docker", "pull", "alpine:latest"
}

task buildAlpineTestDockerTarfile(type: Exec, dependsOn: pullAlpineLatest) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/alpine.tar", "alpine:latest"
}

task buildAggTestDockerTarfile(type: Exec, dependsOn: [buildTestDockerImage, buildWhTestDockerImage]) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/aggregated.tar", "blackducksoftware/centos_minus_vim_plus_bacula:1.0", \
        "blackducksoftware/whiteouttest:1.0"
}

task createDpkgDockerfileTasks() {
    linuxFlavorsDpkg.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        task "create${linuxFlavorDirName}Dockerfile"(type: Dockerfile) {
            destFile = project.file("${buildDir}/images/${linuxFlavorDirName}/${hubDockerImageName}/Dockerfile")
            println "destFile: ${destFile}"
            from linuxFlavor
            maintainer 'Black Duck Software'
			environmentVariable('LANG', 'en_US.UTF-8')
			
            runCommand 'apt-get update -y && \
                apt install -y openjdk-8-jdk vim && \
                apt-get install -y locales && apt-get -y clean'
			runCommand 'locale-gen "en_US.UTF-8"'
            
            runCommand 'mkdir /opt/blackduck'
            runCommand "mkdir ${hubDockerPgmDir}"
            runCommand "mkdir ${hubDockerPgmDir}/config"
            runCommand "mkdir ${hubDockerPgmDir}/working"
			runCommand "mkdir ${hubDockerPgmDir}/template"
            runCommand "mkdir ${hubDockerPgmDir}/target"
			runCommand "mkdir ${hubDockerPgmDir}/output"
            addFile('config', "${hubDockerPgmDir}/config")
            addFile("${project.name}-${version}.jar", "/opt/blackduck/${hubDockerImageName}")
            addFile("hub-docker-inspector-launcher.sh", "/opt/blackduck/${hubDockerImageName}")
			addFile("template/application.properties", "/opt/blackduck/${hubDockerImageName}/template")
            runCommand "chmod u+x ${hubDockerPgmDir}/*.sh"
        }
    }
}

task createDockerfiles(dependsOn: [createubuntuDockerfile, createcentosDockerfile, createalpineDockerfile]) {
}

task buildImageDirs(dependsOn: [addFinalZipToubuntuImageBuildDir, addFinalZipTocentosImageBuildDir, addFinalZipToalpineImageBuildDir,
	addApplicationPropertiesFileToUbuntuImageBuildDir,
    addBashScriptToubuntuImageBuildDir, addBashScriptTocentosImageBuildDir, addBashScriptToalpineImageBuildDir, createDockerfiles]) {
}

task createBuildDockerImageTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        def taskName = "buildDockerImage_${linuxFlavorDirName}"
        String suffix = getSuffix(linuxFlavorDirName)
        println "creating task ${taskName}"
        task "${taskName}"(type: Exec, dependsOn: ["removeDockerImage_${linuxFlavorDirName}", buildImageDirs]) {
            commandLine "docker", "build", "--tag", "blackducksoftware/${hubDockerImageName}${suffix}:${version}", \
                "${buildDir}/images/${linuxFlavorDirName}/${hubDockerImageName}"
        }
    }
}

task pushImageAlpine(type: Exec, dependsOn: [buildDockerImage_alpine]) {
	commandLine "docker", "push", "blackducksoftware/hub-docker-inspector-alpine:${version}"
}

task pushImageCentos(type: Exec, dependsOn: [buildDockerImage_centos]) {
	commandLine "docker", "push", "blackducksoftware/hub-docker-inspector-centos:${version}"
}

task pushImageUbuntu(type: Exec, dependsOn: [buildDockerImage_ubuntu]) {
	commandLine "docker", "push", "blackducksoftware/hub-docker-inspector-ubuntu:${version}"
}

private String getSuffix(String linuxFlavorName) {
    String suffix = "-${linuxFlavorName}"
    suffix
}

task createRemoveDockerImageTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        String linuxFlavorDirName = getNameWithoutVersion(linuxFlavor)
        def taskName = "removeDockerImage_${linuxFlavorDirName}"
        String suffix = getSuffix(linuxFlavorDirName)
        println "creating task ${taskName}"
        task "${taskName}"(type: Exec) {
			ignoreExitValue true
            commandLine "docker", "rmi", "blackducksoftware/${hubDockerImageName}${suffix}:${version}"
        }
    }
}

task buildDockerImages(dependsOn: [buildDockerImage_ubuntu, buildDockerImage_centos, buildDockerImage_alpine]) {
}

task packageScript(type: Zip, dependsOn: fixJarVersionInMainScript) {
	archiveName("${baseName}-${version}-script.${extension}")
	from("${projectDir}/src/main/resources") {
		include 'application.properties'
	}
	from("${projectDir}/build") {
		include 'hub-docker-inspector.sh'
	}
}

task stopDockerContainer(type: Exec) {
	ignoreExitValue true
	commandLine 'docker', 'stop', 'hub-docker-inspector'
}

task testPrep(dependsOn: [stopDockerContainer, removeDockerImage_ubuntu, removeDockerImage_centos, removeDockerImage_alpine, \
    buildTestDockerTarfile, packageScript]) {
	
}

compileJava.dependsOn writeVersionToPropertiesFile

test.dependsOn testPrep

task pkg(dependsOn: [buildDockerImages, packageScript]) {}

task pushImages(dependsOn: [pkg, pushImageAlpine, pushImageCentos, pushImageUbuntu]) {
}

task integrationTest(type: Test, dependsOn: [pushImages, buildWhTestDockerTarfile, buildAggTestDockerTarfile, \
        buildAlpineTestDockerTarfile]) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task itOnly(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task all(dependsOn: [integrationTest]) {}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'com.blackducksoftware.integration:hub-common:14.6.0'
    compile 'com.blackducksoftware.integration:hub-detect-model:0.0.2'
    
    compile 'com.github.docker-java:docker-java:3.0.12'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-collections4:4.1'

    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.codehaus.groovy:groovy-all:2.4.8'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    
    integrationTestCompile 'org.assertj:assertj-core:3.0.0'
}
