buildscript {
    repositories { 
        mavenCentral() 
        jcenter()
        }
    dependencies { 
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.1.RELEASE") 
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
        }
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile) { options.encoding = 'UTF-8' }

group = 'com.blackducksoftware.integration'
version = '0.0.1-SNAPSHOT'
description = ''

sourceCompatibility = 1.8
targetCompatibility = 1.8

def linuxFlavorsDpkg = ["ubuntu"]
def linuxFlavorsRpm = ["centos"]
def linuxFlavors = linuxFlavorsDpkg + linuxFlavorsRpm

springBoot { mainClass = 'com.blackducksoftware.integration.hub.docker.Application' }

task produceFinalZip(type: Zip, dependsOn: build) {
    from("${buildDir}/libs") { include '*.jar' }
    from("${projectDir}/src/main/resources") {
        include 'application.properties'
        into 'config'
    }
}

task createAddZipTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        def linuxFlavorDirName = linuxFlavor.replaceAll("[^a-zA-Z0-9]", "_")
        task "addFinalZipTo${linuxFlavorDirName}ImageBuildDir"(type: Copy, dependsOn: produceFinalZip) {
            def zipFile = file("${buildDir}/distributions/${project.name}-${version}.zip")
            def outputDir = file("${buildDir}/images/${linuxFlavorDirName}/${project.name}")
            from zipTree(zipFile)
            into outputDir
        }
    }
}

task createAddBashScriptTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        def linuxFlavorDirName = linuxFlavor.replaceAll("[^a-zA-Z0-9]", "_")
        task "addBashScriptTo${linuxFlavorDirName}ImageBuildDir"(type: Copy, dependsOn: build) {
            from 'src/main/resources/scan-docker-image-tar.sh'
            into "${buildDir}/images/${linuxFlavorDirName}/${project.name}"
        }
    }
}

task createRpmDockerfileTasks() {
    linuxFlavorsRpm.eachWithIndex {linuxFlavor, index ->
        def linuxFlavorDirName = linuxFlavor.replaceAll("[^a-zA-Z0-9]", "_")
        task "create${linuxFlavorDirName}Dockerfile"(type: Dockerfile) {
            destFile = project.file("${buildDir}/images/${linuxFlavorDirName}/${project.name}/Dockerfile")
            println "destFile: ${destFile}"
            from linuxFlavor
            maintainer 'Black Duck Software'
            
            runCommand 'yum update -y'
            runCommand 'yum install -y java-1.8.0-openjdk'
            runCommand 'yum install -y docker'
            
            runCommand 'mkdir /opt/blackduck'
            runCommand 'mkdir /opt/blackduck/hub-docker'
            runCommand 'mkdir /opt/blackduck/hub-docker/config'
            addFile('config', '/opt/blackduck/hub-docker/config')
            addFile("${project.name}-${version}.jar", "/opt/blackduck/${project.name}")
            addFile("scan-docker-image-tar.sh", "/opt/blackduck/${project.name}")
            runCommand 'mkdir /tmp/blackduck'
            runCommand 'mkdir /tmp/blackduck/hub-docker'
            runCommand 'mkdir /tmp/blackduck/hub-docker/working'
        }
    }
}

task createAptDockerfileTasks() {
    linuxFlavorsDpkg.eachWithIndex {linuxFlavor, index ->
        def linuxFlavorDirName = linuxFlavor.replaceAll("[^a-zA-Z0-9]", "_")
        task "create${linuxFlavorDirName}Dockerfile"(type: Dockerfile) {
            destFile = project.file("${buildDir}/images/${linuxFlavorDirName}/${project.name}/Dockerfile")
            println "destFile: ${destFile}"
            from linuxFlavor
            maintainer 'Black Duck Software'
            
            runCommand 'apt-get update -y'
            runCommand 'apt install -y openjdk-8-jdk apt-transport-https ca-certificates curl software-properties-common'
            runCommand 'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -'
            runCommand 'add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"'
            runCommand 'apt-get update -y'
            runCommand 'apt-get install -y docker-ce'
            runCommand 'dockerd &'
            
            runCommand 'mkdir /opt/blackduck'
            runCommand 'mkdir /opt/blackduck/hub-docker'
            runCommand 'mkdir /opt/blackduck/hub-docker/config'
            addFile('config', '/opt/blackduck/hub-docker/config')
            addFile("${project.name}-${version}.jar", "/opt/blackduck/${project.name}")
            addFile("scan-docker-image-tar.sh", "/opt/blackduck/${project.name}")
            runCommand 'mkdir /tmp/blackduck'
            runCommand 'mkdir /tmp/blackduck/hub-docker'
            runCommand 'mkdir /tmp/blackduck/hub-docker/working'
        }
    }
}

task createDockerfiles(dependsOn: [createubuntuDockerfile, createcentosDockerfile]) {
}

task buildImageDirs(dependsOn: [addFinalZipToubuntuImageBuildDir, addFinalZipTocentosImageBuildDir, 
    addBashScriptToubuntuImageBuildDir, addBashScriptTocentosImageBuildDir, createDockerfiles]) {
}

task createBuildDockerImageTasks() {
    linuxFlavors.eachWithIndex {linuxFlavor, index ->
        def linuxFlavorDirName = linuxFlavor.replaceAll("[^a-zA-Z0-9]", "_")
        def taskName = "buildDockerImage_${linuxFlavorDirName}"
        println "creating task ${taskName}"
        task "${taskName}"(type: Exec, dependsOn: [buildImageDirs]) {
            commandLine "docker", "build", "--tag", "${project.name}-${linuxFlavorDirName}:1.0", "${buildDir}/images/${linuxFlavorDirName}/${project.name}"
        }
    }
}

task buildDockerImages(dependsOn: [buildDockerImage_ubuntu, buildDockerImage_centos]) {
}

task temp(dependsOn: buildDockerImage_centos) {
    
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile 'com.blackducksoftware.integration:hub-common:10.0.0'
    
    compile 'com.github.docker-java:docker-java:3.0.8'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'

    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.codehaus.groovy:groovy-all:2.4.8'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}