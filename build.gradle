apply from: 'artifactory-properties.gradle'

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
        classpath 'org.freemarker:freemarker:2.3.26-incubating'
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven {url "https://oss.sonatype.org/content/repositories/snapshots/"}
}

version = '8.2.3-SNAPSHOT'
project.ext.inspectorImageFamily = "blackduck-imageinspector"
project.ext.inspectorImageVersion = "4.5.3"
project.group = 'com.synopsys.integration'

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.blackducksoftware.integration.solution'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.Dockerfile

apply from: 'airgap.gradle'

springBoot { mainClassName = 'com.synopsys.integration.blackduck.dockerinspector.DockerInspector' }

// TODO if we s/compile/implementation/, can this go?:
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task writeVersionToPropertiesFile() {
	doLast {
		println '\tGenerating version properties file'
		Properties versionProperties = new Properties()
		File versionPropertiesFile = new File('src/main/resources/version.properties')
		versionPropertiesFile.delete()
		versionPropertiesFile.createNewFile()
		versionProperties.setProperty('program.version', version)
		versionProperties.setProperty('inspector.image.family', project.ext.inspectorImageFamily)
		versionProperties.setProperty('inspector.image.version', project.ext.inspectorImageVersion)
		versionProperties.store(versionPropertiesFile.newWriter(), null)
	}
}

task produceFinalZip(type: Zip, dependsOn: [build, writeVersionToPropertiesFile]) {
    from("${buildDir}/libs") { include '*.jar' }
    from("${projectDir}/src/main/resources") {
        include 'application.properties'
        into 'config'
    }
}

task buildScript(type: Copy) {
	from "src/main/resources/${project.name}.sh"
	into 'build'
	filter(ReplaceTokens, tokens: [VERSION: version, INSPECTOR_IMAGE_FAMILY: project.ext.inspectorImageFamily])
}

task docsGeneratedClean(type: Exec) {
    ignoreExitValue true
    commandLine 'rm', '-rf', 'docs/generated'
}

task docsSiteClean(type: Exec) {
    ignoreExitValue true
    commandLine 'rm', '-rf', 'docs/site'
}

task docsClean(dependsOn: [docsSiteClean, docsGeneratedClean]) {}

task docsPrep(type: Exec) {
    ignoreExitValue true
    commandLine 'mkdir', 'docs/generated'
}

task generateHelpMarkdown(type: Exec, dependsOn: docsPrep) {
    ignoreExitValue true
    commandLine "java", "-jar", "${buildDir}/libs/${project.name}-${version}.jar", "--help", "all", "--help.output.path=docs/generated"
}

def outputPath = "docs/generated"
def templatePath = "docs/templates"
def staticPath = "docs/static"

task docs() {
    doLast {
        def output = file(outputPath)
        exec {
            commandLine 'mkdocs', 'build'
            workingDir "docs"
        }
    }
}

task createVersionedScript(type: Copy) {
    from "build/${project.name}.sh"
    into 'build'
    rename("${project.name}.sh", "${project.name}-${version}.sh")
}

task removeTestImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "blackducksoftware/centos_minus_vim_plus_bacula:1.0"
}

task removeTestBaseImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "centos@sha256:773bb32cbd1d171da7df52de8d7b731320748707b821bdbabb885d6eda894e87"
}

task createTestDockerfile(type: Dockerfile) {
	destFile = project.file("${buildDir}/images/test/centos_minus_vim_plus_bacula/Dockerfile")
	println "destFile: ${destFile}"
	from 'centos@sha256:773bb32cbd1d171da7df52de8d7b731320748707b821bdbabb885d6eda894e87'
	maintainer 'Black Duck Software'
	environmentVariable('LANG', 'en_US.UTF-8')
	
	runCommand 'rpm -e vim-minimal && \
        yum install -y bacula-director-5.2.13-23.1.el7 bacula-storage-5.2.13-23.1.el7 bacula-client-5.2.13-23.1.el7 \
        bacula-console-5.2.13-23.1.el7'
}

task buildTestDockerImage(type: Exec, dependsOn: [removeTestBaseImage, removeTestImage, createTestDockerfile]) {
	commandLine "docker", "build", "--no-cache", "--tag", "blackducksoftware/centos_minus_vim_plus_bacula:1.0", \
        "${buildDir}/images/test/centos_minus_vim_plus_bacula"
}

task buildTestDockerTarfile(type: Exec, dependsOn: buildTestDockerImage) {
    outputs.files file("${buildDir}/images/test/centos_minus_vim_plus_bacula.tar")
	commandLine "docker", "save", "-o", "${buildDir}/images/test/centos_minus_vim_plus_bacula.tar", \
        "blackducksoftware/centos_minus_vim_plus_bacula:1.0"
}

task createWhTestDockerfile(type: Dockerfile) {
    destFile = project.file("${buildDir}/images/test/whiteouttest/Dockerfile")
    println "destFile: ${destFile}"
    from 'ubuntu@sha256:3097ac92b852f878f802c22a38f97b097b4084dbef82893ba453ba0297d76a6a'
    maintainer 'Black Duck Software'
    environmentVariable('LANG', 'en_US.UTF-8')
    
    runCommand 'apt-get update && apt-get -y install curl && apt-get -y remove curl && apt-get -y clean'
}

task removeWhImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "blackducksoftware/whiteouttest:1.0"
}

task removeWhBaseImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "ubuntu@sha256:3097ac92b852f878f802c22a38f97b097b4084dbef82893ba453ba0297d76a6a"
}

task buildWhTestDockerImage(type: Exec, dependsOn: [removeWhBaseImage, removeWhImage, createWhTestDockerfile]) {
    commandLine "docker", "build", "--no-cache", "--tag", "blackducksoftware/whiteouttest:1.0", "${buildDir}/images/test/whiteouttest"
}

task buildWhTestDockerTarfile(type: Exec, dependsOn: buildWhTestDockerImage) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/whiteouttest.tar", "blackducksoftware/whiteouttest:1.0"
}

task pullAlpineLatest(type: Exec) {
    commandLine "docker", "pull", "alpine:latest"
}

task pullAlpine36(type: Exec) {
    commandLine "docker", "pull", "alpine@sha256:de5701d6a3a36dc6a5db260d21be0422fd30dd2d158c1e048b34263e73205cb6"
}

task pullUbuntu1404(type: Exec) {
    commandLine "docker", "pull", "ubuntu@sha256:71529e96591eb36a4100cd0cc5353ff1a2f4ee7a85011e3d3dd07cb5eb524a3e"
}

task buildAlpineTestDockerTarfile(type: Exec, dependsOn: pullAlpineLatest) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/alpine.tar", "alpine:latest"
}

task buildUbuntuTestDockerTarfile(type: Exec, dependsOn: pullUbuntu1404) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/ubuntu1404.tar", "ubuntu@sha256:71529e96591eb36a4100cd0cc5353ff1a2f4ee7a85011e3d3dd07cb5eb524a3e"
}

task buildAlpine36TestDockerTarfile(type: Exec, dependsOn: pullAlpine36) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/alpine36.tar", "alpine@sha256:de5701d6a3a36dc6a5db260d21be0422fd30dd2d158c1e048b34263e73205cb6"
}

task buildAggTestDockerTarfile(type: Exec, dependsOn: [buildTestDockerImage, buildWhTestDockerImage]) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/aggregated.tar", "blackducksoftware/centos_minus_vim_plus_bacula:1.0", \
        "blackducksoftware/whiteouttest:1.0"
}

clean.dependsOn docsClean
compileJava.dependsOn writeVersionToPropertiesFile
build.dependsOn generateHelpMarkdown

task checkVersion() {
    doFirst {
        println "Checking to make sure this version (${version}) is a release version"
        if ((version.contains("-SNAPSHOT")) || (version.contains("-RC"))) {
            println "Throwing exception to terminate this build"
            throw new InvalidUserDataException("This version (${version}) looks like a snapshot or release candidate; failing build")
        }
    }
}

task buildTestTarfiles(dependsOn: [buildTestDockerTarfile, buildWhTestDockerTarfile, buildAggTestDockerTarfile, \
        buildAlpineTestDockerTarfile, buildAlpine36TestDockerTarfile, buildUbuntuTestDockerTarfile]) {}

task testPrep(type: Exec, dependsOn: [build, buildTestTarfiles, buildScript, createVersionedScript]) {
    ignoreExitValue true
    commandLine 'mkdir', 'test'
}

testIntegration.dependsOn testPrep

task all(dependsOn: [testIntegration, artifactoryPublish, publishAirGapZip]) {}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/libs/${project.name}-${version}.jar"
            artifact (artifactName)
        }
    }
}

artifactory {
    publish {
        defaults { publications ('mavenJava') }
    }
}

dependencies {
    compile 'com.blackducksoftware.integration:blackduck-common:42.3.0'
    compile 'com.blackducksoftware.integration:hub-imageinspector-lib:11.0.0'
    
    compile 'com.github.docker-java:docker-java:3.1.5'

    compile 'org.springframework.boot:spring-boot-starter'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.29'

    // Adding activation avoids this runtime error: WARNING: HK2 failure has been detected in a code that does not run in an active Jersey Error scope. ...
    // java.lang.NoClassDefFoundError: javax/activation/DataSource
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'

    runtime 'org.springframework.boot:spring-boot-properties-migrator'
    
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'io.fabric8:kubernetes-client:3.1.8'
    testCompile 'io.fabric8:kubernetes-model:2.0.8'
}
