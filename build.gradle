import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.synopsys.integration.blackduck.dockerinspector.artifactory.UpdateArtifactoryPropertiesTask
import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    apply from: "https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-repositories.gradle", to: buildscript
    apply from: "https://raw.githubusercontent.com/blackducksoftware/integration-resources/master/gradle_common/buildscript-dependencies.gradle", to: buildscript

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.3.4.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:6.7.0'
        classpath 'org.freemarker:freemarker:2.3.26-incubating'
    }
}

project.ext.inspectorImageFamily = "blackduck-imageinspector"
project.ext.inspectorImageVersion = "5.0.9"

version = '9.3.0'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.synopsys.integration.solution'

apply from: 'airgap.gradle'

springBoot { mainClassName = 'com.synopsys.integration.blackduck.dockerinspector.DockerInspector' }

// TODO if we s/compile/implementation/, can this go?:
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task writeVersionToPropertiesFile() {
    doLast {
        println '\tChecking version properties'
        File versionPropertiesHashFile = new File('src/main/resources/version.hashcode')
        String existingHash = versionPropertiesHashFile.text

        Properties versionProperties = new Properties()
        versionProperties.setProperty('program.version', version)
        versionProperties.setProperty('inspector.image.family', project.ext.inspectorImageFamily)
        versionProperties.setProperty('inspector.image.version', project.ext.inspectorImageVersion)

        int versionPropertiesHashCode = versionProperties.hashCode()
        if (!Integer.toString(versionPropertiesHashCode).equals(existingHash)) {
            println '\tGenerating version properties file'
            File versionPropertiesFile = new File('src/main/resources/version.properties')
            versionPropertiesFile.delete()
            versionPropertiesFile.createNewFile()
            versionProperties.store(versionPropertiesFile.newWriter(), null)
            versionPropertiesHashFile.delete()
            versionPropertiesHashFile.createNewFile()
            versionPropertiesHashFile.text = versionPropertiesHashCode
        }
    }
}

task produceFinalZip(type: Zip, dependsOn: [build, writeVersionToPropertiesFile]) {
    from("${buildDir}/libs") { include '*.jar' }
    from("${projectDir}/src/main/resources") {
        include 'application.properties'
        into 'config'
    }
}

task buildScript(type: Copy) {
    from "src/main/resources/${project.name}.sh"
    into 'build'
    filter(ReplaceTokens, tokens: [VERSION: version, INSPECTOR_IMAGE_FAMILY: project.ext.inspectorImageFamily])
}

task docsGeneratedClean(type: Delete) {
    delete 'docs/generated'
}

task docsSiteClean(type: Delete) {
    delete 'docs/site'
}

task docsClean(dependsOn: [docsSiteClean, docsGeneratedClean]) {}

task docsPrep() {
    doLast {
	project.file('docs/generated').mkdirs()
    }
}

task generateHelpMarkdown(type: Exec, dependsOn: docsPrep) {
    ignoreExitValue true
    commandLine "java", "-jar", "${buildDir}/libs/${project.name}-${version}.jar", "--help", "all", "--help.output.path=docs/generated"
}

def outputPath = "docs/generated"
def templatePath = "docs/templates"
def staticPath = "docs/static"

task docs() {
    dependsOn build
    doLast {
        def output = file(outputPath)
        exec {
            commandLine 'mkdocs', 'build'
            workingDir "docs"
        }
    }
}

task servedocs() {
    dependsOn docs

    doLast {
        exec {
            commandLine 'mkdocs', 'serve'
            workingDir "docs"
        }
    }
}

task createVersionedScript(type: Copy) {
    from "build/${project.name}.sh"
    into 'build'
    rename("${project.name}.sh", "${project.name}-${version}.sh")
}

task removeTestImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "blackducksoftware/centos_minus_vim_plus_bacula:1.0"
}

task removeTestBaseImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "centos@sha256:773bb32cbd1d171da7df52de8d7b731320748707b821bdbabb885d6eda894e87"
}

task createTestDockerfile(type: Dockerfile) {
    destFile = project.file("${buildDir}/images/test/centos_minus_vim_plus_bacula/Dockerfile")
    println "destFile: ${destFile}"
    from 'centos@sha256:773bb32cbd1d171da7df52de8d7b731320748707b821bdbabb885d6eda894e87'
    environmentVariable('LANG', 'en_US.UTF-8')

    runCommand 'rpm -e vim-minimal && \
        yum install -y bacula-director-5.2.13-23.1.el7 bacula-storage-5.2.13-23.1.el7 bacula-client-5.2.13-23.1.el7 \
        bacula-console-5.2.13-23.1.el7'
}

task buildTestDockerImage(type: Exec, dependsOn: [removeTestBaseImage, removeTestImage, createTestDockerfile]) {
    commandLine "docker", "build", "--no-cache", "--tag", "blackducksoftware/centos_minus_vim_plus_bacula:1.0",  \
         "${buildDir}/images/test/centos_minus_vim_plus_bacula"
}

task buildTestDockerTarfile(type: Exec, dependsOn: buildTestDockerImage) {
    outputs.files file("${buildDir}/images/test/centos_minus_vim_plus_bacula.tar")
    commandLine "docker", "save", "-o", "${buildDir}/images/test/centos_minus_vim_plus_bacula.tar",  \
         "blackducksoftware/centos_minus_vim_plus_bacula:1.0"
}

task createWhTestDockerfile(type: Dockerfile) {
    destFile = project.file("${buildDir}/images/test/whiteouttest/Dockerfile")
    println "destFile: ${destFile}"
    from 'ubuntu@sha256:3097ac92b852f878f802c22a38f97b097b4084dbef82893ba453ba0297d76a6a'
    environmentVariable('LANG', 'en_US.UTF-8')

    runCommand 'apt-get update && apt-get -y install curl && apt-get -y remove curl && apt-get -y clean'
}

task removeWhImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "blackducksoftware/whiteouttest:1.0"
}

task removeWhBaseImage(type: Exec) {
    ignoreExitValue true
    commandLine "docker", "rmi", "ubuntu@sha256:3097ac92b852f878f802c22a38f97b097b4084dbef82893ba453ba0297d76a6a"
}

task buildWhTestDockerImage(type: Exec, dependsOn: [removeWhBaseImage, removeWhImage, createWhTestDockerfile]) {
    commandLine "docker", "build", "--no-cache", "--tag", "blackducksoftware/whiteouttest:1.0", "${buildDir}/images/test/whiteouttest"
}

task buildWhTestDockerTarfile(type: Exec, dependsOn: buildWhTestDockerImage) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/whiteouttest.tar", "blackducksoftware/whiteouttest:1.0"
}

task pullAlpineLatest(type: Exec) {
    commandLine "docker", "pull", "alpine:latest"
}

task pullAlpine36(type: Exec) {
    commandLine "docker", "pull", "alpine@sha256:de5701d6a3a36dc6a5db260d21be0422fd30dd2d158c1e048b34263e73205cb6"
}

task pullUbuntu1404(type: Exec) {
    commandLine "docker", "pull", "ubuntu@sha256:71529e96591eb36a4100cd0cc5353ff1a2f4ee7a85011e3d3dd07cb5eb524a3e"
}

task buildAlpineTestDockerTarfile(type: Exec, dependsOn: pullAlpineLatest) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/alpine.tar", "alpine:latest"
}

task buildUbuntuTestDockerTarfile(type: Exec, dependsOn: pullUbuntu1404) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/ubuntu1404.tar", "ubuntu@sha256:71529e96591eb36a4100cd0cc5353ff1a2f4ee7a85011e3d3dd07cb5eb524a3e"
}

task buildAlpine36TestDockerTarfile(type: Exec, dependsOn: pullAlpine36) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/alpine36.tar", "alpine@sha256:de5701d6a3a36dc6a5db260d21be0422fd30dd2d158c1e048b34263e73205cb6"
}

task buildAggTestDockerTarfile(type: Exec, dependsOn: [buildTestDockerImage, buildWhTestDockerImage]) {
    commandLine "docker", "save", "-o", "${buildDir}/images/test/aggregated.tar", "blackducksoftware/centos_minus_vim_plus_bacula:1.0",  \
         "blackducksoftware/whiteouttest:1.0"
}

clean.dependsOn docsClean
compileJava.dependsOn writeVersionToPropertiesFile
build.dependsOn generateHelpMarkdown

task updateArtifactoryProperties(type: UpdateArtifactoryPropertiesTask) {
    dependsOn artifactoryPublish
}

task checkVersion() {
    doFirst {
        println "Checking to make sure this version (${version}) is a release version"
        if ((version.contains("-SNAPSHOT")) || (version.contains("-RC"))) {
            println "Throwing exception to terminate this build"
            throw new InvalidUserDataException("This version (${version}) looks like a snapshot or release candidate; failing build")
        }
    }
}

task buildTestTarfiles(dependsOn: [buildTestDockerTarfile, buildWhTestDockerTarfile, buildAggTestDockerTarfile,  \
         buildAlpineTestDockerTarfile, buildAlpine36TestDockerTarfile, buildUbuntuTestDockerTarfile]) {}

task testPrep(dependsOn: [build, buildTestTarfiles, buildScript, createVersionedScript]) {
    doLast {
	project.file('test/containerShared/target').mkdirs()
	project.file('test/containerShared/output').mkdirs()
    }
}

task cleanExtras(type: Delete, dependsOn: docsGeneratedClean) {
    delete 'test', 'out'
}


clean.dependsOn cleanExtras
testIntegration.dependsOn testPrep
task all(dependsOn: [testIntegration, artifactoryPublish, publishAirGapZip]) {}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def artifactName = "${buildDir}/libs/${project.name}-${version}.jar"
            artifact(artifactName)
        }
    }
}

artifactory {
    publish {
        defaults { publications('mavenJava') }
    }
}

dependencies {
    compile 'com.synopsys.integration:blackduck-common:54.2.3'
    compile 'net.minidev:json-smart:2.4.2'
    compile 'com.synopsys.integration:integration-bdio:22.1.1'
    compile 'com.synopsys.integration:hub-imageinspector-lib:14.0.4'

    compile 'com.github.docker-java:docker-java-core:3.2.7'
    compile 'com.github.docker-java:docker-java-transport-httpclient5:3.2.7'

    compile 'org.springframework.boot:spring-boot-starter'
    compile group: 'org.freemarker', name: 'freemarker', version: '2.3.29'

    // Adding activation avoids this runtime error: WARNING: HK2 failure has been detected in a code that does not run in an active Jersey Error scope. ...
    // java.lang.NoClassDefFoundError: javax/activation/DataSource
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'

    runtime 'org.springframework.boot:spring-boot-properties-migrator'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'io.fabric8:kubernetes-client:3.1.8'
    testCompile 'io.fabric8:kubernetes-model:2.0.8'
}
