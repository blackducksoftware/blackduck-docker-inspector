{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Help Topics Black Duck Docker Inspector 8.3.1-SNAPSHOT Options for navigating this help content: Use the top-level topic list in the left sidebar to navigate to a topic. On each page containing multiple sections, a table of contents for the page displays on the right sidebar. Type a search term into the Search box on the right side of the header, then select from the list of topics that mention that term. If you are new to Black Duck Docker Inspector, reading the topics in the order presented in the left sidebar is a reasonable way to start. You can use the Next link at the bottom right of each page to advance to the next topic.","title":"<b>Help topics</b>"},{"location":"#help-topics","text":"Black Duck Docker Inspector 8.3.1-SNAPSHOT Options for navigating this help content: Use the top-level topic list in the left sidebar to navigate to a topic. On each page containing multiple sections, a table of contents for the page displays on the right sidebar. Type a search term into the Search box on the right side of the header, then select from the list of topics that mention that term. If you are new to Black Duck Docker Inspector, reading the topics in the order presented in the left sidebar is a reasonable way to start. You can use the Next link at the bottom right of each page to advance to the next topic.","title":"Help Topics"},{"location":"advanced/","text":"This section covers a variety of advanced topics. Isolating application components If you are interested in components from the application layers of your image, but not interested in components from the underlying platform layers, you can exclude components from platform layers from your results. For example, if you build your application on ubuntu:latest (your Dockerfile starts with FROM ubuntu:latest), you can exclude components from the Ubuntu layer(s) so that the components generated by Black Duck Docker Inspector contain only components from your application layers. First, find the layer ID of the platform's top layer using the following process. Run the docker inspect command on the base image. In this example, this is ubuntu:latest. Find the last element in the RootFS.Layers array. This is the platform top layer ID. In the following example, this is sha256:b079b3fa8d1b4b30a71a6e81763ed3da1327abaf0680ed3ed9f00ad1d5de5e7c. Set the value of the Black Duck Docker Inspector property docker.platform.top.layer.id to the platform top layer ID. For example: ./blackduck-docker-inspector.sh ... --docker.platform.top.layer.id=sha256:b079b3fa8d1b4b30a71a6e81763ed3da1327abaf0680ed3ed9f00ad1d5de5e7c In this mode, the container file system and/or container file system squashed image produced by Black Duck Docker Inspector only contains files added to the image by application layers. If the Black Duck signature scanner is run on this file, it generates results based only on files found on application layers. This provides the benefit of isolating application components by excluding platform components. However, there may be some loss in match accuracy from the signature scanner because in this scenario, the signature scanner may be deprived of some contextual information, such as the operating system files that enable it to determine the Linux distribution. This could negatively affect its ability to accurately identify components. Inspecting multiple images more efficiently by leaving services running By default, Black Duck Docker Inspector starts, uses, and then stops and removes either one or two containerized image inspector services per run. This may be appropriate when scanning a single image, but when scanning many images it is highly inefficient, and it doesn't support concurrent execution of multiple Black Duck Docker Inspector runs. The scanning of many images is completed significantly faster by starting the image inspector services once, and running multiple instances of Black Duck Docker Inspector, so that each one sends requests to the already-running image inspector services. The following script illustrates how this is done in a Docker environment: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/docker/batchedImageInspection.sh To keep the example simple, this script only starts the Alpine image inspector service. In general, you must start two more services: the Ubuntu image inspector service for inspecting images built from dpkg-based Linux distros, and the CentOS image inspector service for inspecting images built from rpm-based Linux distributions. It doesn't matter which service receives the request; any service redirects if necessary. Concurrent execution You can inspect multiple images in parallel on the same computer if you (a) directly invoke the .jar file, and (b) leave the services running. For example: # Get the latest blackduck-docker-inspector.sh curl -O https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh chmod +x ./blackduck-docker-inspector.sh # Determine the current Black Duck Docker Inspector version inspectorVersion=$(grep \"^version=\" blackduck-docker-inspector.sh|cut -d'\"' -f2) # Download the latest Black Duck Docker Inspector .jar file to the current dir ./blackduck-docker-inspector.sh --pulljar # Execute multiple inspections in parallel java -jar ./blackduck-docker-inspector-${inspectorVersion}.jar --blackduck.url={Black Duck url} --blackduck.username={Black Duck username} --docker.image=alpine:3.5 --cleanup.inspector.container=false # Allow time for the image inspector service to start before starting the rest of the runs (do this for each image inspector type that you use: alpine, centos, ubuntu) java -jar ./blackduck-docker-inspector-${inspectorVersion}.jar --blackduck.url={Black Duck url} --blackduck.username={Black Duck username} --docker.image=alpine:3.4 --cleanup.inspector.container=false java -jar ./blackduck-docker-inspector-${inspectorVersion}.jar --blackduck.url={Black Duck url} --blackduck.username={Black Duck username} --docker.image=alpine:3.3 --cleanup.inspector.container=false Alternative methods for setting property values Black Duck Docker Inspector gets its property values from Spring Boot's configuration mechanism . Black Duck Docker Inspector users can leverage Spring Boot capabilities beyond command line arguments and environment variables; for example, hierarchy of property files and placeholders to manage properties in more sophisticated ways. Passing passwords and other values with increased security For greater security, sensitive property values such as passwords can be set through the environment variables using one of the Spring Boot configuration mechanisms previously mentioned. For example, instead of passing --blackduck.password=mypassword on the command line, you can do the following: export BLACKDUCK_PASSWORD=mypassword ./blackduck-docker-inspector.sh --blackduck.url=http://blackduck.mydomain.com:8080/ --blackduck.username=myusername --docker.image=ubuntu:latest Refer to Spring Boot's configuration mechanism for more information. Air Gap mode In Black Duck Docker Inspector versions 6.2.0 and higher, Black Duck provides an archive containing all files required to run Black Duck Docker Inspector without requiring access to the internet. To download the Air Gap archive, run the command: ./blackduck-docker-inspector.sh --pullairgapzip To create the Docker images from the Air Gap archive required by Black Duck Docker Inspector, run the commands: unzip blackduck-docker-inspector-{version}-air-gap.zip docker load -i blackduck-imageinspector-alpine.tar docker load -i blackduck-imageinspector-centos.tar docker load -i blackduck-imageinspector-ubuntu.tar To run in Air Gap mode, use the command: ./blackduck-docker-inspector.sh --upload.bdio=false --jar.path=./blackduck-docker-inspector-{version}.jar --docker.tar={tarfile} Configuring Black Duck Docker Inspector for your Docker Engine and registry If you invoke Black Duck Docker Inspector with an image reference; in other words, a repo:tag value versus a .tar file, it uses the docker-java library (https://github.com/docker-java/docker-java) to access the Docker registry to pull the image. If docker pull works from the command line, then Black Duck Docker Inspector is able to pull that image, because docker-java can be configured the same way as the Docker command line utility ( docker ). There are also other ways to configure docker-java. For more information on configuring docker-java (and therefore Black Duck Docker Inspector) for your Docker registry, refer to: https://github.com/docker-java/docker-java#Configuration. Black Duck Docker Inspector does not override any of the configuration settings in the code, so all other methods such as properties, system properties, and system environment, are available to you. If you use environment variables, and you are calling Black Duck Docker Inspector from Detect, you must prefix the environment variable names with DETECT_DOCKER_PASSTHROUGH_ to instruct Detect to pass them on to Black Duck Docker Inspector. In this scenario, instead of export SOMENAME=value , use export DETECT_DOCKER_PASSTHROUGH_SOMENAME=value . To use system properties which are normally set using java -D, and if you are calling Black Duck Docker Inspector from Detect, you must put the properties in a file; for example, mydockerproperties.properties, and use: --detect.docker.passthrough.system.properties.path=mydockerproperties.properties to point Black Duck Docker Inspector to those property settings. Running Black Duck Docker Inspector on Open Container Initiative (OCI) images When given a Docker image, (--docker.image=repo:tag), Black Duck Docker Inspector uses the docker-java library equivalent of docker save to save the image to a tar file. In this scenario, Black Duck Docker Inspector can pull, save, and inspect any image that can be pulled using a docker pull command. Since Black Duck Docker Inspector uses the docker-java library, the Docker client executable does not actually need to be installed. When given a saved Docker tarfile, (--docker.tar=image.tar), Black Duck Docker Inspector requires a Docker Image Specification v1.2.0 format file. To inspect Open Container Initiative (OCI) format image files, Synopsys recommends using skopeo to convert them to Docker Image Specification v1.2.0 files. For example, the command: skopeo copy oci:alpine-oci docker-archive:alpine-docker.tar converts an OCI image directory alpine-oci to a Docker Image Specification v1.2.0 format file alpine-docker.tar that Black Duck Docker Inspector can process when passed in with the --docker.tar=alpine-docker.tar command line argument. Running Detect on a project directory that exists within a Docker image When you want to run Detect on a directory that exists within a Docker image, you can use the following approach: 1. Run Detect on the image to generate the container filesystem for the image. 2. Run Detect on a directory within that container filesystem. Detect performs these actions without running the image/container. To see a simple example that illustrates this approach, use the following commands to download these sample files: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/docker/runDetectInImageDir/runDetectInImageDir.sh curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/docker/runDetectInImageDir/Dockerfile Review the script before running it to make sure the side effects (files and directories that it creates) are acceptable. You must make the script executable before you run it. Running the signature scanner on a specific directory within a Docker image To use iScan to scan a specific directory within an image: Run Black Duck Docker Inspector on the target image to get the container file system. You can also do this using Detect using --detect.docker.passthrough.* properties. Include the following Black Duck Docker Inspector properties: --upload.bdio=false # disable BDIO upload --output.include.containerfilesystem=true # tell DI to output the container file system --output.path={your output dir} # tell DI where to put the output Locate the container file system in the output directory (*.tar.gz) and untar it. cd into the directory within the untared container file system that you want to scan. Invoke Detect there. Excluding files/directories from the returned container file system which excludes them from Detect's signature scan To exclude certain files and/or directories from the returned file system, you can specify that list of directories with the property --output.containerfilesystem.excluded.paths . For example, if you are invoking Black Duck Docker Inspector from Detect, and want Detect to exclude the /etc and /usr/bin directories from the signature scan, you could run Detect like this: ./detect.sh --detect.docker.image=ubuntu:latest --detect.docker.passthrough.output.containerfilesystem.excluded.paths=/etc,/usr/bin","title":"Advanced"},{"location":"advanced/#isolating-application-components","text":"If you are interested in components from the application layers of your image, but not interested in components from the underlying platform layers, you can exclude components from platform layers from your results. For example, if you build your application on ubuntu:latest (your Dockerfile starts with FROM ubuntu:latest), you can exclude components from the Ubuntu layer(s) so that the components generated by Black Duck Docker Inspector contain only components from your application layers. First, find the layer ID of the platform's top layer using the following process. Run the docker inspect command on the base image. In this example, this is ubuntu:latest. Find the last element in the RootFS.Layers array. This is the platform top layer ID. In the following example, this is sha256:b079b3fa8d1b4b30a71a6e81763ed3da1327abaf0680ed3ed9f00ad1d5de5e7c. Set the value of the Black Duck Docker Inspector property docker.platform.top.layer.id to the platform top layer ID. For example: ./blackduck-docker-inspector.sh ... --docker.platform.top.layer.id=sha256:b079b3fa8d1b4b30a71a6e81763ed3da1327abaf0680ed3ed9f00ad1d5de5e7c In this mode, the container file system and/or container file system squashed image produced by Black Duck Docker Inspector only contains files added to the image by application layers. If the Black Duck signature scanner is run on this file, it generates results based only on files found on application layers. This provides the benefit of isolating application components by excluding platform components. However, there may be some loss in match accuracy from the signature scanner because in this scenario, the signature scanner may be deprived of some contextual information, such as the operating system files that enable it to determine the Linux distribution. This could negatively affect its ability to accurately identify components.","title":"Isolating application components"},{"location":"advanced/#inspecting-multiple-images-more-efficiently-by-leaving-services-running","text":"By default, Black Duck Docker Inspector starts, uses, and then stops and removes either one or two containerized image inspector services per run. This may be appropriate when scanning a single image, but when scanning many images it is highly inefficient, and it doesn't support concurrent execution of multiple Black Duck Docker Inspector runs. The scanning of many images is completed significantly faster by starting the image inspector services once, and running multiple instances of Black Duck Docker Inspector, so that each one sends requests to the already-running image inspector services. The following script illustrates how this is done in a Docker environment: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/docker/batchedImageInspection.sh To keep the example simple, this script only starts the Alpine image inspector service. In general, you must start two more services: the Ubuntu image inspector service for inspecting images built from dpkg-based Linux distros, and the CentOS image inspector service for inspecting images built from rpm-based Linux distributions. It doesn't matter which service receives the request; any service redirects if necessary.","title":"Inspecting multiple images more efficiently by leaving services running"},{"location":"advanced/#concurrent-execution","text":"You can inspect multiple images in parallel on the same computer if you (a) directly invoke the .jar file, and (b) leave the services running. For example: # Get the latest blackduck-docker-inspector.sh curl -O https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh chmod +x ./blackduck-docker-inspector.sh # Determine the current Black Duck Docker Inspector version inspectorVersion=$(grep \"^version=\" blackduck-docker-inspector.sh|cut -d'\"' -f2) # Download the latest Black Duck Docker Inspector .jar file to the current dir ./blackduck-docker-inspector.sh --pulljar # Execute multiple inspections in parallel java -jar ./blackduck-docker-inspector-${inspectorVersion}.jar --blackduck.url={Black Duck url} --blackduck.username={Black Duck username} --docker.image=alpine:3.5 --cleanup.inspector.container=false # Allow time for the image inspector service to start before starting the rest of the runs (do this for each image inspector type that you use: alpine, centos, ubuntu) java -jar ./blackduck-docker-inspector-${inspectorVersion}.jar --blackduck.url={Black Duck url} --blackduck.username={Black Duck username} --docker.image=alpine:3.4 --cleanup.inspector.container=false java -jar ./blackduck-docker-inspector-${inspectorVersion}.jar --blackduck.url={Black Duck url} --blackduck.username={Black Duck username} --docker.image=alpine:3.3 --cleanup.inspector.container=false","title":"Concurrent execution"},{"location":"advanced/#alternative-methods-for-setting-property-values","text":"Black Duck Docker Inspector gets its property values from Spring Boot's configuration mechanism . Black Duck Docker Inspector users can leverage Spring Boot capabilities beyond command line arguments and environment variables; for example, hierarchy of property files and placeholders to manage properties in more sophisticated ways.","title":"Alternative methods for setting property values"},{"location":"advanced/#passing-passwords-and-other-values-with-increased-security","text":"For greater security, sensitive property values such as passwords can be set through the environment variables using one of the Spring Boot configuration mechanisms previously mentioned. For example, instead of passing --blackduck.password=mypassword on the command line, you can do the following: export BLACKDUCK_PASSWORD=mypassword ./blackduck-docker-inspector.sh --blackduck.url=http://blackduck.mydomain.com:8080/ --blackduck.username=myusername --docker.image=ubuntu:latest Refer to Spring Boot's configuration mechanism for more information.","title":"Passing passwords and other values with increased security"},{"location":"advanced/#air-gap-mode","text":"In Black Duck Docker Inspector versions 6.2.0 and higher, Black Duck provides an archive containing all files required to run Black Duck Docker Inspector without requiring access to the internet. To download the Air Gap archive, run the command: ./blackduck-docker-inspector.sh --pullairgapzip To create the Docker images from the Air Gap archive required by Black Duck Docker Inspector, run the commands: unzip blackduck-docker-inspector-{version}-air-gap.zip docker load -i blackduck-imageinspector-alpine.tar docker load -i blackduck-imageinspector-centos.tar docker load -i blackduck-imageinspector-ubuntu.tar To run in Air Gap mode, use the command: ./blackduck-docker-inspector.sh --upload.bdio=false --jar.path=./blackduck-docker-inspector-{version}.jar --docker.tar={tarfile}","title":"Air Gap mode"},{"location":"advanced/#configuring-black-duck-docker-inspector-for-your-docker-engine-and-registry","text":"If you invoke Black Duck Docker Inspector with an image reference; in other words, a repo:tag value versus a .tar file, it uses the docker-java library (https://github.com/docker-java/docker-java) to access the Docker registry to pull the image. If docker pull works from the command line, then Black Duck Docker Inspector is able to pull that image, because docker-java can be configured the same way as the Docker command line utility ( docker ). There are also other ways to configure docker-java. For more information on configuring docker-java (and therefore Black Duck Docker Inspector) for your Docker registry, refer to: https://github.com/docker-java/docker-java#Configuration. Black Duck Docker Inspector does not override any of the configuration settings in the code, so all other methods such as properties, system properties, and system environment, are available to you. If you use environment variables, and you are calling Black Duck Docker Inspector from Detect, you must prefix the environment variable names with DETECT_DOCKER_PASSTHROUGH_ to instruct Detect to pass them on to Black Duck Docker Inspector. In this scenario, instead of export SOMENAME=value , use export DETECT_DOCKER_PASSTHROUGH_SOMENAME=value . To use system properties which are normally set using java -D, and if you are calling Black Duck Docker Inspector from Detect, you must put the properties in a file; for example, mydockerproperties.properties, and use: --detect.docker.passthrough.system.properties.path=mydockerproperties.properties to point Black Duck Docker Inspector to those property settings.","title":"Configuring Black Duck Docker Inspector for your Docker Engine and registry"},{"location":"advanced/#running-black-duck-docker-inspector-on-open-container-initiative-oci-images","text":"When given a Docker image, (--docker.image=repo:tag), Black Duck Docker Inspector uses the docker-java library equivalent of docker save to save the image to a tar file. In this scenario, Black Duck Docker Inspector can pull, save, and inspect any image that can be pulled using a docker pull command. Since Black Duck Docker Inspector uses the docker-java library, the Docker client executable does not actually need to be installed. When given a saved Docker tarfile, (--docker.tar=image.tar), Black Duck Docker Inspector requires a Docker Image Specification v1.2.0 format file. To inspect Open Container Initiative (OCI) format image files, Synopsys recommends using skopeo to convert them to Docker Image Specification v1.2.0 files. For example, the command: skopeo copy oci:alpine-oci docker-archive:alpine-docker.tar converts an OCI image directory alpine-oci to a Docker Image Specification v1.2.0 format file alpine-docker.tar that Black Duck Docker Inspector can process when passed in with the --docker.tar=alpine-docker.tar command line argument.","title":"Running Black Duck Docker Inspector on Open Container Initiative (OCI) images"},{"location":"advanced/#running-detect-on-a-project-directory-that-exists-within-a-docker-image","text":"When you want to run Detect on a directory that exists within a Docker image, you can use the following approach: 1. Run Detect on the image to generate the container filesystem for the image. 2. Run Detect on a directory within that container filesystem. Detect performs these actions without running the image/container. To see a simple example that illustrates this approach, use the following commands to download these sample files: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/docker/runDetectInImageDir/runDetectInImageDir.sh curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/docker/runDetectInImageDir/Dockerfile Review the script before running it to make sure the side effects (files and directories that it creates) are acceptable. You must make the script executable before you run it.","title":"Running Detect on a project directory that exists within a Docker image"},{"location":"advanced/#running-the-signature-scanner-on-a-specific-directory-within-a-docker-image","text":"To use iScan to scan a specific directory within an image: Run Black Duck Docker Inspector on the target image to get the container file system. You can also do this using Detect using --detect.docker.passthrough.* properties. Include the following Black Duck Docker Inspector properties: --upload.bdio=false # disable BDIO upload --output.include.containerfilesystem=true # tell DI to output the container file system --output.path={your output dir} # tell DI where to put the output Locate the container file system in the output directory (*.tar.gz) and untar it. cd into the directory within the untared container file system that you want to scan. Invoke Detect there.","title":"Running the signature scanner on a specific directory within a Docker image"},{"location":"advanced/#excluding-filesdirectories-from-the-returned-container-file-system-which-excludes-them-from-detects-signature-scan","text":"To exclude certain files and/or directories from the returned file system, you can specify that list of directories with the property --output.containerfilesystem.excluded.paths . For example, if you are invoking Black Duck Docker Inspector from Detect, and want Detect to exclude the /etc and /usr/bin directories from the signature scan, you could run Detect like this: ./detect.sh --detect.docker.image=ubuntu:latest --detect.docker.passthrough.output.containerfilesystem.excluded.paths=/etc,/usr/bin","title":"Excluding files/directories from the returned container file system which excludes them from Detect's signature scan"},{"location":"architecture/","text":"Architecture overview Black Duck Docker Inspector uses up to three container-based image inspector services; one for each of the supported Linux package manager database formats. The three image inspector services provide coverage of the three package manager database formats: DPKG, RPM, and APK. By default, Black Duck Docker Inspector submits its request to inspect the target image to the DPKG (Ubuntu) image inspector service. All services redirect to the appropriate image inspector service if it cannot handle the request. For example, if the target image is a Red Hat image, the Ubuntu inspector service, which cannot inspect a Red Hat image, redirects to the CentOS inspector service, which can inspect a Red Hat image. If you know that most of your images have either RPM or APK databases, you can improve performance by configuring Black Duck Docker Inspector to send requests to the CentOS (RPM) or Alpine (APK) image inspector service using the property imageinspector.service.distro.default . In host mode (the default), Black Duck Docker Inspector automatically uses the Docker engine to pull as needed from Docker Hub the following three images: blackducksoftware/blackduck-imageinspector-alpine, blackducksoftware/blackduck-imageinspector-centos, and blackducksoftware/blackduck-imageinspector-ubuntu. Black Duck Docker Inspector starts those services as needed, and stops and removes the containers when Black Duck Docker Inspector exits. It uses a shared volume to share files, such as the target Docker image, between the Black Duck Docker Inspector utility and the three service containers. In container mode, start the container running Black Duck Docker Inspector and the three image inspector container-based services such that all four containers share a mounted volume and can communicate with each other using HTTP GET operations using base URLs that you provide. For more information, refer to Deployment . Execution phases Host mode In host mode, Black Duck Docker Inspector performs the following steps on the host: Pulls and saves the target image to a .tar file if you passed the image by repo:tag . Checks to see if the default image inspector service is running. If not, it pulls the inspector image and starts a container, mounting a shared volume. Requests the Black Duck input/output (BDIO) file and container file system by sending an HTTP GET request to the image inspector service. The following steps are performed inside the image inspector container: Builds the container file system that a container has if you ran the target image. It does not run the target image. Determines the target image package manager database format, and redirects to a different image inspector service if necessary. Runs the image inspector's Linux package manager on the target image package manager database to get the list of installed packages. Produces and returns a BDIO (.jsonld) file consisting of a list of target image packages and, optionally, the container filesystem. The following steps are performed back on the host when the request to the image inspector service returns: Uploads the BDIO file to Black Duck. Note that this can be disabled. Copies the output files to the output directory. Stops/removes the image inspector container. Note that this can be disabled. Container mode In container mode, you start four containers in such a way that they share a mounted volume and can reach each other through HTTP GET operations using base URLs that you provide: One container for Black Duck Docker Inspector. One container for each of the three image inspector services: Alpine, CentOS, and Ubuntu. In container mode, you must provide the image in a .tar file created with the docker save command. Black Duck Docker Inspector: Requests the Black Duck input/output (BDIO) file and container file system using HTTP from the default image inspector service using a base URL that you have provided. The following steps are performed inside the image inspector container: Builds the container file system that a container has if you ran the target image. It does not run the target image. Determines the target image package manager database format, and redirects to a different image inspector service if necessary. Runs the image inspector's Linux package manager on the target image package manager database. Produces and returns a BDIO (.jsonld) file consisting of a list of target image packages and, optionally, the container filesystem. The following steps are performed back in the Black Duck Docker Inspector container when the request to the image inspector service returns: Uploads the BDIO file to Black Duck. Note that this can be disabled. Copies the output files to the output directory.","title":"Architecture"},{"location":"architecture/#architecture-overview","text":"Black Duck Docker Inspector uses up to three container-based image inspector services; one for each of the supported Linux package manager database formats. The three image inspector services provide coverage of the three package manager database formats: DPKG, RPM, and APK. By default, Black Duck Docker Inspector submits its request to inspect the target image to the DPKG (Ubuntu) image inspector service. All services redirect to the appropriate image inspector service if it cannot handle the request. For example, if the target image is a Red Hat image, the Ubuntu inspector service, which cannot inspect a Red Hat image, redirects to the CentOS inspector service, which can inspect a Red Hat image. If you know that most of your images have either RPM or APK databases, you can improve performance by configuring Black Duck Docker Inspector to send requests to the CentOS (RPM) or Alpine (APK) image inspector service using the property imageinspector.service.distro.default . In host mode (the default), Black Duck Docker Inspector automatically uses the Docker engine to pull as needed from Docker Hub the following three images: blackducksoftware/blackduck-imageinspector-alpine, blackducksoftware/blackduck-imageinspector-centos, and blackducksoftware/blackduck-imageinspector-ubuntu. Black Duck Docker Inspector starts those services as needed, and stops and removes the containers when Black Duck Docker Inspector exits. It uses a shared volume to share files, such as the target Docker image, between the Black Duck Docker Inspector utility and the three service containers. In container mode, start the container running Black Duck Docker Inspector and the three image inspector container-based services such that all four containers share a mounted volume and can communicate with each other using HTTP GET operations using base URLs that you provide. For more information, refer to Deployment .","title":"Architecture overview"},{"location":"architecture/#execution-phases","text":"","title":"Execution phases"},{"location":"architecture/#host-mode","text":"In host mode, Black Duck Docker Inspector performs the following steps on the host: Pulls and saves the target image to a .tar file if you passed the image by repo:tag . Checks to see if the default image inspector service is running. If not, it pulls the inspector image and starts a container, mounting a shared volume. Requests the Black Duck input/output (BDIO) file and container file system by sending an HTTP GET request to the image inspector service. The following steps are performed inside the image inspector container: Builds the container file system that a container has if you ran the target image. It does not run the target image. Determines the target image package manager database format, and redirects to a different image inspector service if necessary. Runs the image inspector's Linux package manager on the target image package manager database to get the list of installed packages. Produces and returns a BDIO (.jsonld) file consisting of a list of target image packages and, optionally, the container filesystem. The following steps are performed back on the host when the request to the image inspector service returns: Uploads the BDIO file to Black Duck. Note that this can be disabled. Copies the output files to the output directory. Stops/removes the image inspector container. Note that this can be disabled.","title":"Host mode"},{"location":"architecture/#container-mode","text":"In container mode, you start four containers in such a way that they share a mounted volume and can reach each other through HTTP GET operations using base URLs that you provide: One container for Black Duck Docker Inspector. One container for each of the three image inspector services: Alpine, CentOS, and Ubuntu. In container mode, you must provide the image in a .tar file created with the docker save command. Black Duck Docker Inspector: Requests the Black Duck input/output (BDIO) file and container file system using HTTP from the default image inspector service using a base URL that you have provided. The following steps are performed inside the image inspector container: Builds the container file system that a container has if you ran the target image. It does not run the target image. Determines the target image package manager database format, and redirects to a different image inspector service if necessary. Runs the image inspector's Linux package manager on the target image package manager database. Produces and returns a BDIO (.jsonld) file consisting of a list of target image packages and, optionally, the container filesystem. The following steps are performed back in the Black Duck Docker Inspector container when the request to the image inspector service returns: Uploads the BDIO file to Black Duck. Note that this can be disabled. Copies the output files to the output directory.","title":"Container mode"},{"location":"deployment/","text":"Deployment overview Black Duck Docker Inspector can be run in either of the following modes: Host mode on a Linux machine or a Linux virtual machine (VM) with Docker. The deployment approach for host mode is referred to below as \"utility;\" you simply execute a command, and deployment is automatic. Container mode inside a container running on an orchestration platform such as Kubernetes, OpenShift, among others. The deployment approach for container mode is referred to below as \"toolkit;\" you take components provided by Docker Inspector (one utility, three containerized services) and deploy them yourself. Most, but not all, of the following deployment examples use the toolkit approach. Important notes regarding deployment sample code The deployment samples provided are intended to illustrate possible approaches to the challenges involved in deploying Black Duck Docker Inspector. They are not intended to be used as-is in production. You should understand the code before you use it. They do not represent the only way to deploy in each environment. Your deployment approach is the same whether you are invoking Black Duck Docker Inspector directly, or invoking it using Detect. Most of the sample deployments use Detect simply because that is the most common use case. Using host mode on a Linux machine or Linux VM with Docker In this scenario, Black Duck Docker Inspector is a command line utility that automatically pulls/runs and uses container-based services, and cleans them up when it's done. The Docker command, if installed on the machine, can be very useful for troubleshooting, but is not actually required or used by Black Duck Docker Inspector. In this mode, Black Duck Docker Inspector requires access to a Docker Engine, similar to the way the Docker client requires access to a Docker Engine, so it can pull and run Docker images. It uses the https://github.com/docker-java/docker-java library to perform Docker operations using the Docker Engine. In this mode, Black Duck Docker Inspector automatically pulls, runs, stops, and removes the container-based image inspector services on which it depends. It accesses the services they provide through HTTP GET operations. This is the default mode, and the simplest to use. Using container mode in a container orchestration platform such as Kubernetes, OpenShift, and others In this scenario, Black Duck Docker Inspector is a toolkit consisting of a command line utility that you run in one container, plus three container-based services which you must start. These four containers must: (a) Share a mounted volume, either persistent or temporary, used to pass large files between containers, and: (b) Be able to reach each other through HTTP GET operations using base URLs that you provide. Image Inspector Services Black Duck Docker Inspector consists of a command line utility provided in a Java .jar, but sometimes invoked using a bash script, and three image inspector services. The required Docker operations, if any, are performed by the command line utility, while the image inspector services perform the work of unpacking the target Docker image, extracting the Linux package manager database, and running the Linux package manager against that database to extract installed packages and translate them to components which are actually externalIDs for Black Duck. If the image inspector service finds in the target image a package manager database that is incompatible with its own package manager utility; for example, when you run Black Duck Docker Inspector on an Alpine image, but the request goes to the Ubuntu image inspector service, the image inspector service redirects the request to the appropriate image inspector service. You can change the default image inspector service to reduce the likelihood of redirects, resulting in shorter execution times. For example, if most of your target images are Alpine, you can set imageinspector.service.distro.default to alpine . The image inspector service containers are downloaded from Docker Hub (blackducksoftware/blackduck-imageinspector-*). Deployment sample for Kubernetes Approach: Toolkit Deployment notes: Each image inspector service runs in a separate pod. The shared volume is a hostPath volume. The containers communicate through service URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/kubernetes/setup.txt Deployment sample for OpenShift Approach: Toolkit Deployment notes: All image inspector services run in a single pod. The shared volume is an emptyDir volume. The containers communicate through localhost URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/openshift/setup.txt Deployment sample for Travis CI Approach: Toolkit Deployment notes: Uses the Travis CI Docker service. The containers communicate through localhost URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/travisci/travis.yml Deployment sample for GitLab CI Approach: Toolkit Deployment notes: Uses the GitLab CI shell executor. The containers communicate through localhost URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/gitlabci/setup.sh Deployment sample for Circle CI Approach: Utility Deployment notes: Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/circleci/config.yml Deployment sample for Docker with Detect running in a container Approach: Toolkit Deployment notes: The containers communicate through localhost URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/docker/runDetectInContainer/setup.sh Configuring Black Duck Docker Inspector for your Docker registry If you invoke Black Duck Docker Inspector with an image reference versus an image that is saved to a .tar file, it uses the docker-java library (https://github.com/docker-java/docker-java) to access the Docker registry to pull the image. If docker pull {targetimage} works from the command line, then Black Duck Docker Inspector is also able to pull that image, because docker-java can be configured the same way as the Docker command line utility. There are other ways to configure docker-java. For more information on configuring docker-java and Black Duck Docker Inspector for your Docker registry, refer to: https://github.com/docker-java/docker-java#Configuration. Black Duck Docker Inspector does not override any of the configuration settings in the code, so any of the other methods (properties, system properties, system environment) work. If you choose to use environment variables, and you are calling Black Duck Docker Inspector from Detect, you must prefix the environment variable names with DETECT_DOCKER_PASSTHROUGH_ to instruct Detect to pass them on to Black Duck Docker Inspector. In that scenario, instead of export SOMENAME=value , use export DETECT_DOCKER_PASSTHROUGH_SOMENAME=value . If you choose to use system properties which are normally set using java -D , and you are calling Black Duck Docker Inspector from Detect, you must put the properties in a file; for example, mydockerproperties.properties , and use --detect.docker.passthrough.system.properties.path=mydockerproperties.properties to point Black Duck Docker Inspector to those property settings.","title":"Deploying"},{"location":"deployment/#deployment-overview","text":"Black Duck Docker Inspector can be run in either of the following modes: Host mode on a Linux machine or a Linux virtual machine (VM) with Docker. The deployment approach for host mode is referred to below as \"utility;\" you simply execute a command, and deployment is automatic. Container mode inside a container running on an orchestration platform such as Kubernetes, OpenShift, among others. The deployment approach for container mode is referred to below as \"toolkit;\" you take components provided by Docker Inspector (one utility, three containerized services) and deploy them yourself. Most, but not all, of the following deployment examples use the toolkit approach.","title":"Deployment overview"},{"location":"deployment/#important-notes-regarding-deployment-sample-code","text":"The deployment samples provided are intended to illustrate possible approaches to the challenges involved in deploying Black Duck Docker Inspector. They are not intended to be used as-is in production. You should understand the code before you use it. They do not represent the only way to deploy in each environment. Your deployment approach is the same whether you are invoking Black Duck Docker Inspector directly, or invoking it using Detect. Most of the sample deployments use Detect simply because that is the most common use case.","title":"Important notes regarding deployment sample code"},{"location":"deployment/#using-host-mode-on-a-linux-machine-or-linux-vm-with-docker","text":"In this scenario, Black Duck Docker Inspector is a command line utility that automatically pulls/runs and uses container-based services, and cleans them up when it's done. The Docker command, if installed on the machine, can be very useful for troubleshooting, but is not actually required or used by Black Duck Docker Inspector. In this mode, Black Duck Docker Inspector requires access to a Docker Engine, similar to the way the Docker client requires access to a Docker Engine, so it can pull and run Docker images. It uses the https://github.com/docker-java/docker-java library to perform Docker operations using the Docker Engine. In this mode, Black Duck Docker Inspector automatically pulls, runs, stops, and removes the container-based image inspector services on which it depends. It accesses the services they provide through HTTP GET operations. This is the default mode, and the simplest to use.","title":"Using host mode on a Linux machine or Linux VM with Docker"},{"location":"deployment/#using-container-mode-in-a-container-orchestration-platform-such-as-kubernetes-openshift-and-others","text":"In this scenario, Black Duck Docker Inspector is a toolkit consisting of a command line utility that you run in one container, plus three container-based services which you must start. These four containers must: (a) Share a mounted volume, either persistent or temporary, used to pass large files between containers, and: (b) Be able to reach each other through HTTP GET operations using base URLs that you provide.","title":"Using container mode in a container orchestration platform such as Kubernetes, OpenShift, and others"},{"location":"deployment/#image-inspector-services","text":"Black Duck Docker Inspector consists of a command line utility provided in a Java .jar, but sometimes invoked using a bash script, and three image inspector services. The required Docker operations, if any, are performed by the command line utility, while the image inspector services perform the work of unpacking the target Docker image, extracting the Linux package manager database, and running the Linux package manager against that database to extract installed packages and translate them to components which are actually externalIDs for Black Duck. If the image inspector service finds in the target image a package manager database that is incompatible with its own package manager utility; for example, when you run Black Duck Docker Inspector on an Alpine image, but the request goes to the Ubuntu image inspector service, the image inspector service redirects the request to the appropriate image inspector service. You can change the default image inspector service to reduce the likelihood of redirects, resulting in shorter execution times. For example, if most of your target images are Alpine, you can set imageinspector.service.distro.default to alpine . The image inspector service containers are downloaded from Docker Hub (blackducksoftware/blackduck-imageinspector-*).","title":"Image Inspector Services"},{"location":"deployment/#deployment-sample-for-kubernetes","text":"Approach: Toolkit Deployment notes: Each image inspector service runs in a separate pod. The shared volume is a hostPath volume. The containers communicate through service URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/kubernetes/setup.txt","title":"Deployment sample for Kubernetes"},{"location":"deployment/#deployment-sample-for-openshift","text":"Approach: Toolkit Deployment notes: All image inspector services run in a single pod. The shared volume is an emptyDir volume. The containers communicate through localhost URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/openshift/setup.txt","title":"Deployment sample for OpenShift"},{"location":"deployment/#deployment-sample-for-travis-ci","text":"Approach: Toolkit Deployment notes: Uses the Travis CI Docker service. The containers communicate through localhost URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/travisci/travis.yml","title":"Deployment sample for Travis CI"},{"location":"deployment/#deployment-sample-for-gitlab-ci","text":"Approach: Toolkit Deployment notes: Uses the GitLab CI shell executor. The containers communicate through localhost URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/gitlabci/setup.sh","title":"Deployment sample for GitLab CI"},{"location":"deployment/#deployment-sample-for-circle-ci","text":"Approach: Utility Deployment notes: Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/circleci/config.yml","title":"Deployment sample for Circle CI"},{"location":"deployment/#deployment-sample-for-docker-with-detect-running-in-a-container","text":"Approach: Toolkit Deployment notes: The containers communicate through localhost URLs. Download: curl -O https://raw.githubusercontent.com/blackducksoftware/blackduck-docker-inspector/master/deployment/docker/runDetectInContainer/setup.sh","title":"Deployment sample for Docker with Detect running in a container"},{"location":"deployment/#configuring-black-duck-docker-inspector-for-your-docker-registry","text":"If you invoke Black Duck Docker Inspector with an image reference versus an image that is saved to a .tar file, it uses the docker-java library (https://github.com/docker-java/docker-java) to access the Docker registry to pull the image. If docker pull {targetimage} works from the command line, then Black Duck Docker Inspector is also able to pull that image, because docker-java can be configured the same way as the Docker command line utility. There are other ways to configure docker-java. For more information on configuring docker-java and Black Duck Docker Inspector for your Docker registry, refer to: https://github.com/docker-java/docker-java#Configuration. Black Duck Docker Inspector does not override any of the configuration settings in the code, so any of the other methods (properties, system properties, system environment) work. If you choose to use environment variables, and you are calling Black Duck Docker Inspector from Detect, you must prefix the environment variable names with DETECT_DOCKER_PASSTHROUGH_ to instruct Detect to pass them on to Black Duck Docker Inspector. In that scenario, instead of export SOMENAME=value , use export DETECT_DOCKER_PASSTHROUGH_SOMENAME=value . If you choose to use system properties which are normally set using java -D , and you are calling Black Duck Docker Inspector from Detect, you must put the properties in a file; for example, mydockerproperties.properties , and use --detect.docker.passthrough.system.properties.path=mydockerproperties.properties to point Black Duck Docker Inspector to those property settings.","title":"Configuring Black Duck Docker Inspector for your Docker registry"},{"location":"overview/","text":"Help version: 8.3.1-SNAPSHOT Black Duck Docker Inspector inspects Docker images to discover packages (components). It utilizes the appropriate Linux package manager to provide a list of the packages installed by the package manager, and creates a Black Duck project with a Bill of Materials (BOM) consisting of those packages as components. Because it relies on the Linux package manager as its source, the discovered packages are limited to those installed and managed using the Linux package manager. Black Duck Docker Inspector can inspect Linux Docker images that use the DPKG, RPM, or APK package manager formats. After running the Black Duck Docker Inspector on an image, navigate to Black Duck to view the BOM created by Black Duck Docker Inspector. Modes of operation Black Duck Docker Inspector has two modes: Host mode, for running on a Linux machine/Linux virtual machine (VM) where Black Duck Docker Inspector can perform Docker operations using a Docker Engine. Container mode, for running in a container started by Docker, Kubernetes, OpenShift, and others. Host mode Host mode (default) is for Linux machines/VMs where Black Duck Docker Inspector can perform Docker operations using a Docker Engine. In host mode, Black Duck Docker Inspector is a utility that automates the process of using Black Duck to discover security, license, and operational risks associated with Linux-based Docker images. It discovers components using the target Docker image's package manager; therefore, the results are limited to those components (packages) of which the package manager is aware. Black Duck Docker Inspector does this without running the image, so it is safe to run on untrusted images. Black Duck Docker Inspector can pull the target image; in other words, the Docker image you want to inspect, from a Docker registry such as Docker Hub. Alternatively, you can save an image to a .tar file by using the docker save command. Then, run Black Duck Docker Inspector on the .tar file. Black Duck Docker Inspector supports Docker Image Specification v1.2.0 format .tar files. Container mode Container mode is for container orchestration environments; for example, Kubernetes, OpenShift, and others, where Black Duck Docker Inspector runs inside a container where it cannot perform Docker operations. For information on running Black Duck Docker Inspector in container mode, refer to Deploying . Requirements Requirements for Black Duck Docker Inspector are: The current version of Black Duck. Visit this page to determine the current version. Linux. Access to the internet. For information on running without access to the internet, refer to Air Gap mode . Java (JRE) versions 8 or 11. Three available ports for the image inspector services. By default, these ports are 9000, 9001, and 9002. When invoking Black Duck Docker Inspector using blackduck-docker-inspector.sh: curl bash In host mode: access to a Docker Engine versions 17.09 or higher. In container mode: you must start the Black Duck Docker Inspector container that meets the preceding requirements, and three container-based \"image inspector\" services. All four of these containers must share a mounted volume and be able to reach each other through HTTP GET operations using base URLs that you provide. For more information, refer to Deploying . Getting started The following command format always fetches and runs the latest version of Black Duck Docker Inspector: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) {Black Duck Docker Inspector arguments} For example: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --help bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --upload.bdio=false --docker.image=ubuntu An alternative is to download and run the latest Black Duck Docker Inspector script: curl -O https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh chmod +x blackduck-docker-inspector.sh ./blackduck-docker-inspector.sh {Black Duck Docker Inspector arguments} The advantage of using the Black Duck Docker Inspector script is that it ensures you always run the latest version of the Black Duck Docker Inspector .jar. Another alternative is to download the Black Duck Docker Inspector .jar (using the script) and run the .jar directly: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --pulljar java -jar blackduck-docker-inspector-{version}.jar {Black Duck Docker Inspector arguments} Passing arguments to Black Duck Docker Inspector Running Black Duck Docker Inspector typically involves invoking the script or .jar with some command line arguments: blackduck-docker-inspector.sh {Black Duck Docker Inspector arguments} Black Duck Docker Inspector command line arguments consist of property assignments. Any supported property can be set by adding to the command line a property assignment of the form: --{property name}={value} Alternatively, any supported property can be set by adding to a text file named application.properties in the current directory a line of the form: {property name}={value} An application.properties file can contain multiple property assignments. There are other alternative methods for setting properties. For more information, refer to Running . Help Available help topics: overview (this page) architecture running properties advanced deployment troubleshooting releasenotes all To display a help topic, run Black Duck Docker Inspector with either -h or --help followed by a topic. For example: -h properties To display multiple help topics, use a comma-separated list of help topics. For example: -h overview,properties,running To display all help topics, use topic all : -h all To write help to a file, add --help.output.path={directory or file path} : -h all --help.output.format=html --help.output.path=. Help content is output in Markdown format, which can be formatted (\"pretty printed\") using tools like mdless (https://brettterpstra.com/2015/08/21/mdless-better-markdown-in-terminal/).","title":"Overview"},{"location":"overview/#modes-of-operation","text":"Black Duck Docker Inspector has two modes: Host mode, for running on a Linux machine/Linux virtual machine (VM) where Black Duck Docker Inspector can perform Docker operations using a Docker Engine. Container mode, for running in a container started by Docker, Kubernetes, OpenShift, and others.","title":"Modes of operation"},{"location":"overview/#host-mode","text":"Host mode (default) is for Linux machines/VMs where Black Duck Docker Inspector can perform Docker operations using a Docker Engine. In host mode, Black Duck Docker Inspector is a utility that automates the process of using Black Duck to discover security, license, and operational risks associated with Linux-based Docker images. It discovers components using the target Docker image's package manager; therefore, the results are limited to those components (packages) of which the package manager is aware. Black Duck Docker Inspector does this without running the image, so it is safe to run on untrusted images. Black Duck Docker Inspector can pull the target image; in other words, the Docker image you want to inspect, from a Docker registry such as Docker Hub. Alternatively, you can save an image to a .tar file by using the docker save command. Then, run Black Duck Docker Inspector on the .tar file. Black Duck Docker Inspector supports Docker Image Specification v1.2.0 format .tar files.","title":"Host mode"},{"location":"overview/#container-mode","text":"Container mode is for container orchestration environments; for example, Kubernetes, OpenShift, and others, where Black Duck Docker Inspector runs inside a container where it cannot perform Docker operations. For information on running Black Duck Docker Inspector in container mode, refer to Deploying .","title":"Container mode"},{"location":"overview/#requirements","text":"Requirements for Black Duck Docker Inspector are: The current version of Black Duck. Visit this page to determine the current version. Linux. Access to the internet. For information on running without access to the internet, refer to Air Gap mode . Java (JRE) versions 8 or 11. Three available ports for the image inspector services. By default, these ports are 9000, 9001, and 9002. When invoking Black Duck Docker Inspector using blackduck-docker-inspector.sh: curl bash In host mode: access to a Docker Engine versions 17.09 or higher. In container mode: you must start the Black Duck Docker Inspector container that meets the preceding requirements, and three container-based \"image inspector\" services. All four of these containers must share a mounted volume and be able to reach each other through HTTP GET operations using base URLs that you provide. For more information, refer to Deploying .","title":"Requirements"},{"location":"overview/#getting-started","text":"The following command format always fetches and runs the latest version of Black Duck Docker Inspector: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) {Black Duck Docker Inspector arguments} For example: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --help bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --upload.bdio=false --docker.image=ubuntu An alternative is to download and run the latest Black Duck Docker Inspector script: curl -O https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh chmod +x blackduck-docker-inspector.sh ./blackduck-docker-inspector.sh {Black Duck Docker Inspector arguments} The advantage of using the Black Duck Docker Inspector script is that it ensures you always run the latest version of the Black Duck Docker Inspector .jar. Another alternative is to download the Black Duck Docker Inspector .jar (using the script) and run the .jar directly: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --pulljar java -jar blackduck-docker-inspector-{version}.jar {Black Duck Docker Inspector arguments}","title":"Getting started"},{"location":"overview/#passing-arguments-to-black-duck-docker-inspector","text":"Running Black Duck Docker Inspector typically involves invoking the script or .jar with some command line arguments: blackduck-docker-inspector.sh {Black Duck Docker Inspector arguments} Black Duck Docker Inspector command line arguments consist of property assignments. Any supported property can be set by adding to the command line a property assignment of the form: --{property name}={value} Alternatively, any supported property can be set by adding to a text file named application.properties in the current directory a line of the form: {property name}={value} An application.properties file can contain multiple property assignments. There are other alternative methods for setting properties. For more information, refer to Running .","title":"Passing arguments to Black Duck Docker Inspector"},{"location":"overview/#help","text":"Available help topics: overview (this page) architecture running properties advanced deployment troubleshooting releasenotes all To display a help topic, run Black Duck Docker Inspector with either -h or --help followed by a topic. For example: -h properties To display multiple help topics, use a comma-separated list of help topics. For example: -h overview,properties,running To display all help topics, use topic all : -h all To write help to a file, add --help.output.path={directory or file path} : -h all --help.output.format=html --help.output.path=. Help content is output in Markdown format, which can be formatted (\"pretty printed\") using tools like mdless (https://brettterpstra.com/2015/08/21/mdless-better-markdown-in-terminal/).","title":"Help"},{"location":"properties/","text":"You can configure Docker Inspector by setting any of the following properties. Properties are typically set via the command line by adding a command line argument of the form: --{property name}={property value} See the Advanced for other ways to set properties. Available properties: Property name Type Description Default value blackduck.always.trust.cert Boolean Black Duck Always Trust Cert? false blackduck.api.token String Black Duck token blackduck.codelocation.name String Black Duck CodeLocation name blackduck.codelocation.prefix String Black Duck CodeLocation prefix blackduck.password String Black Duck Password blackduck.project.name String Black Duck Project Name blackduck.project.version String Black Duck Project Version blackduck.proxy.host String Black Duck Proxy Host blackduck.proxy.password String Black Duck Proxy Password blackduck.proxy.port String Black Duck Proxy Port blackduck.proxy.username String Black Duck Proxy Username blackduck.timeout Integer Black Duck Timeout in seconds 120 blackduck.url String Black Duck URL blackduck.username String Black Duck Username cleanup.inspector.container Boolean Stop inspector container after using it? true cleanup.inspector.image Boolean Remove inspector image after using it? false cleanup.target.image Boolean Remove target image after saving it? false cleanup.working.dir Boolean Cleanup Working Dir? true command.timeout Long Command Timeout (Milliseconds) 120000 docker.image String Docker Image name:tag docker.image.id String The ID (shown in the 'IMAGE ID' column of 'docker images' output) of the target Docker image. The target image must already be local (must appear in the output of 'docker images'). docker.image.repo String Docker Image Repo; Use with docker.image.tag to select one image from a tarfile docker.image.tag String Docker Image Tag; Use with docker.image.repo to select one image from a tarfile docker.platform.top.layer.id String To ignore components from platform layers: specify the ID (from docker inspect : last of RootFS.Layers) of the top layer of the platform image docker.tar String Docker tarfile path help.output.path String The path to a file or directory to which help output will be written in markdown format. If not set, help will be written to stdout. If set, the directory must exist; the file will be created if it does not exist. If the path to a directory is provided, Docker Inspector will generate the filename automatically imageinspector.service.distro.default String Default image inspector Linux distro (alpine, centos, or ubuntu) ubuntu imageinspector.service.port.alpine String alpine image inspector host port 9000 imageinspector.service.port.centos String centos image inspector host port 9001 imageinspector.service.port.ubuntu String ubuntu image inspector host port 9002 imageinspector.service.start Boolean Start ImageInspector services (containers) as needed? true imageinspector.service.url String The URL of the (already running) imageinspector service to use jar.path String Black Duck Docker Inspector .jar file path linux.distro String Target image Linux distribution name. Use this if you need to override the Linux distribution name discovered by Docker Inspector. logging.level.com.synopsys String Logging Level (WARN, INFO, DEBUG, TRACE) INFO offline.mode Boolean Make no attempts to access network-based resources (the Black Duck server, docker repository) false output.containerfilesystem.excluded.paths String Comma-separated list of directories/files/links (specified as absolute paths) to exclude from the container filesystem output.include.containerfilesystem Boolean Include container filesystem (a large file) in output? false output.include.squashedimage Boolean Include container filesystem (a large file) in output? false output.path String Path to directory for output files service.timeout Long HTTP Service Request Timeout (Milliseconds) 600000 shared.dir.path.local String The host's path to the dir shared with the imageinspector containers. Only needed if using existing imageinspector containers /tmp/blackduck-docker-inspector-files/shared system.properties.path String Path to a properties file containing additional system properties (an alternative to java -D) upload.bdio Boolean Upload BDIO? true working.dir.path String Working Directory Path /tmp/blackduck-docker-inspector-files","title":"Properties"},{"location":"quickstart/","text":"To help you get started using Black Duck Docker Inspector, here's a simple example. Step 1: Determine the repo:tag of the Docker image you want to inspect To run Black Duck Docker Inspector on a Docker image from Docker Hub , use Docker Hub to identify the repo:tag of the image you want to inspect. For example: ubuntu:latest . To run Black Duck Docker Inspector on an image that is already on your machine (perhaps because you built it), use the REPOSITORY and TAG columns from the output of the docker images command to identify the repo:tag of the image you want to inspect. On the Black Duck Docker Inspector command line, pass your repo:tag using this argument: --docker.image={repo}:{tag} Step 2 (optional): Determine your Black Duck URL and credentials To enable Black Duck Docker Inspector to upload results to Black Duck, you will need a Black Duck URL, username, and password. (For information on using an API token to authenticate with Black Duck, refer to Properties ). On the Black Duck Docker Inspector command line, pass your Black Duck connection details using the following arguments: --blackduck.url={your Black Duck URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} As an alternative, to run Black Duck Docker Inspector without connecting to Black Duck, pass this argument on the command line: --upload.bdio=false Step 3: Run Black Duck Docker Inspector To inspect an image and upload the results to Black Duck: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --blackduck.url={your Black Duck URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} --docker.image={repo}:{tag} Step 4: Review your results in Black Duck To see your results, log into Black Duck, and look for a project with a name matching the docker image repo . The version name will match the docker image tag .","title":"Quick start"},{"location":"quickstart/#step-1-determine-the-repotag-of-the-docker-image-you-want-to-inspect","text":"To run Black Duck Docker Inspector on a Docker image from Docker Hub , use Docker Hub to identify the repo:tag of the image you want to inspect. For example: ubuntu:latest . To run Black Duck Docker Inspector on an image that is already on your machine (perhaps because you built it), use the REPOSITORY and TAG columns from the output of the docker images command to identify the repo:tag of the image you want to inspect. On the Black Duck Docker Inspector command line, pass your repo:tag using this argument: --docker.image={repo}:{tag}","title":"Step 1: Determine the repo:tag of the Docker image you want to inspect"},{"location":"quickstart/#step-2-optional-determine-your-black-duck-url-and-credentials","text":"To enable Black Duck Docker Inspector to upload results to Black Duck, you will need a Black Duck URL, username, and password. (For information on using an API token to authenticate with Black Duck, refer to Properties ). On the Black Duck Docker Inspector command line, pass your Black Duck connection details using the following arguments: --blackduck.url={your Black Duck URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} As an alternative, to run Black Duck Docker Inspector without connecting to Black Duck, pass this argument on the command line: --upload.bdio=false","title":"Step 2 (optional): Determine your Black Duck URL and credentials"},{"location":"quickstart/#step-3-run-black-duck-docker-inspector","text":"To inspect an image and upload the results to Black Duck: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --blackduck.url={your Black Duck URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} --docker.image={repo}:{tag}","title":"Step 3: Run Black Duck Docker Inspector"},{"location":"quickstart/#step-4-review-your-results-in-black-duck","text":"To see your results, log into Black Duck, and look for a project with a name matching the docker image repo . The version name will match the docker image tag .","title":"Step 4: Review your results in Black Duck"},{"location":"releasenotes/","text":"Version 8.3.1 Resolved issues Fixed an issue that prevented the linux.distro property from working correctly. Version 8.3.0 New features Docker Inspector now writes a summary of results to the file results.json, located in the output directory. Version 8.2.3 Resolved issues Eliminated the Spring banner from the log to facilitate piping help output through a Markdown formatter. Version 8.2.2 Resolved issues Increased the default value of service.timeout from four minutes to ten minutes. The time Docker Inspector waits for an image inspector service to come online is now controlled using the service.timeout property. Version 8.2.1 Resolved issues Resolved an issue that caused blackduck-docker-inspector.sh to display the help overview even when a different help topic is requested. Resolved an issue that caused Docker Inspector to return the full container filesystem even when only application components are requested ( docker.platform.top.layer.id is specified). Version 8.2.0 New features Added support for Java 11. Added the ability to generate help by topic (--help {topic}). Added the ability to generate help in HTML. Added the ability to write help output to a given file. Version 8.1.6 Changed feature Adjusted logging to ensure that sensitive information does not display in a debug log. Version 8.1.5 Resolved issues Resolved an issue that could cause Docker Inspector to incorrectly identify the package manager of the target image. Version 8.1.4 New features Added a GitLab continuous integration deployment example. Version 8.1.3 New features Added a Travis continuous integration deployment example. Version 8.1.2 Changed features Updated blackduck-docker-inspector.sh to download the Docker Inspector .jar file from the new Artifactory repository at sig-repo.synopsys.com. Version 8.1.1 Resolved issues Resolved an issue that caused Docker Inspector to fail when it was unable to read the image inspector container log. Version 8.1.0 Resolved issues Resolved an issue that could cause a No such file error on files named classes.jsa when inspecting images containing Java. New features Added the property output.containerfilesystem.excluded.paths . Added the command line switch --help=true for invoking help. Added the property output.include.squashedimage . Version 8.0.2 Resolved issues Resolved an issue that could cause missing components on Fedora-based Docker images. Version 8.0.1 Resolved issues Resolved an issue that could cause OpenSUSE components to be omitted from the Bill Of Materials. New features Increased default image Inspector service timeout from two minutes to four minutes. Version 8.0.0 New features Added the ability to collect only those components added to the image package manager database by your application layers, versus the platform layers on which your application is built. Added the ability to provide the full code location name. Removed features Docker exec mode (deprecated in Docker Inspector 7.0.0) is removed. Docker Inspector now supports HTTP client mode only. Version 7.3.3 Resolved issues Resolved an issue that could prevent controlling the image inspector HTTP request service timeout through the property service.timeout . Version 7.3.2 Resolved issues Resolved an issue that could cause RPM packages containing a value in the epoch field to be missing from the Black Duck Bill of Materials (BOM). Version 7.3.1 Resolved issues Resolved an issue that could cause Hub Detect versions 5.2.0 and higher to fail with an error message of DOCKER extraction failed: null when invoking Docker Inspector on a non-Linux Docker image. Version 7.3.0 New features Added the property system.properties.path . Version 7.2.4 Resolved issues Resolved an issue that could cause Docker Inspector to fail with an error message of Error inspecting image: Failed to parse docker configuration file (Unrecognized field \"identitytoken\") . Version 7.2.3 Changed features When constructing the container file system with the logging level set to DEBUG or TRACE: after applying each image layer, Docker Inspector now logs contents of the layer's metadata (json) file and the list of components. Version 7.2.2 Resolved issues Resolved an issue that could cause Black Duck input/output data (BDIO) uploads to fail for openSUSE and Red Hat Docker images. Version 7.2.1 Resolved issues Resolved an issue that could cause the Black Duck BOM creation to fail with an error message of Error in MAPPING_COMPONENTS displayed on the Black Duck Scans page for certain images. Version 7.2.0 New features Added offline mode. Resolved issues Resolved an issue that could generate a warning message of Error creating hard link to be logged when inspecting certain images. Resolved an issue that could generate a warning message of Error removing whited-out file .../.wh..opq to be logged when inspecting images with opaque directory whiteout files. Reduced the disk space used in the working directory within the Inspector containers. Version 7.1.0 Changed features Modified the format of the generated external identifiers to take advantage of the Black Duck KnowledgeBase preferred alias namespace feature. Modified the format of the generated external identifiers to include the epoch, when applicable, for RPM packages. Version 7.0.1 Resolved issues When the logging level is set to DEBUG or higher, the contents of the image inspector service log are now included in the log output. The image inspector service is now started with the same logging level as Black Duck Docker Inspector. Version 7.0.0 Changed features Hub Docker Inspector is now renamed to Black Duck Docker Inspector. The shell script, .jar filename, properties, and code blocks are updated accordingly. Black Duck Docker Inspector now runs in HTTP mode by default. Resolved issues HTTP client mode: Resolved an issue that prevents removal of the image inspector image upon completion. HTTP client mode: Resolved an issue with user-specified Black Duck project names and version names. HTTP client mode: Resolved an issue that caused the container filesystem to be provided even when it was not requested. Version 6.3.1 Resolved issues Resolved an issue that could cause DEBUG-level warnings to be logged while inspecting images with file paths containing non-ASCII characters. Improved logging for when the image inspector service is started but never comes online. In http client mode start service mode: if a health check fails, Docker Inspector now performs a docker logs operation on the container to reveal the root problem. Orchestration platform properties are now included in the --help output. Version 6.3.0 New features Added the --inspectorimagefamily command line argument, which prints the Inspector image family name. Version 6.2.0 Resolved issues Resolved an issue that caused Docker Inspector to fail when the image repository contained a : character and the image tag was not specified. New features Added the --pullairgapzip option. Improved error messages. Version 6.1.0 Resolved issues Added support for running on container application platforms such as Kubernetes and OpenShift. Renamed Rest Client Mode to HTTP Client Mode. Resolved an issue that prevented BDIO (Black Duck Input/Output data) from being uploaded to the Hub. This issue only impacted HTTP client mode. Resolved an issue that caused Docker Inspector to fail when inspecting an image containing no package manager. This issue only impacted HTTP client node. Version 6.0.4 Resolved issues Resolved an issue wherein Hub Docker Inspector may fail if the target Docker tarfile path contained spaces. Version 6.0.3 Resolved issues Resolved an issue causing Hub Docker Inspector to produce an unnecessarily large container filesystem output file. Version 6.0.2 Resolved issues Resolved an issue causing Hub Docker Inspector to fail when the image exists in the local cache but not the registry. Version 6.0.1 Resolved issues Removed extraneous and possibly misleading log messages. New features Added the properties docker.image.repo and docker.image.tag to the usage message generated when using the command line argument --help . Version 6.0.0 New features Added REST client mode. Changed features The available properties list included in the usage message, which displays when using the command line argument --help , is now sorted alphabetically. The format of the (optional) container filesystem output file name has changed. The new container system file name is {image name} {image tag} containerfilesystem.tar.gz or {image tarfilename}.tar.gz , depending on how the target image is specified.","title":"Release notes"},{"location":"releasenotes/#version-831","text":"","title":"Version 8.3.1"},{"location":"releasenotes/#resolved-issues","text":"Fixed an issue that prevented the linux.distro property from working correctly.","title":"Resolved issues"},{"location":"releasenotes/#version-830","text":"","title":"Version 8.3.0"},{"location":"releasenotes/#new-features","text":"Docker Inspector now writes a summary of results to the file results.json, located in the output directory.","title":"New features"},{"location":"releasenotes/#version-823","text":"","title":"Version 8.2.3"},{"location":"releasenotes/#resolved-issues_1","text":"Eliminated the Spring banner from the log to facilitate piping help output through a Markdown formatter.","title":"Resolved issues"},{"location":"releasenotes/#version-822","text":"","title":"Version 8.2.2"},{"location":"releasenotes/#resolved-issues_2","text":"Increased the default value of service.timeout from four minutes to ten minutes. The time Docker Inspector waits for an image inspector service to come online is now controlled using the service.timeout property.","title":"Resolved issues"},{"location":"releasenotes/#version-821","text":"","title":"Version 8.2.1"},{"location":"releasenotes/#resolved-issues_3","text":"Resolved an issue that caused blackduck-docker-inspector.sh to display the help overview even when a different help topic is requested. Resolved an issue that caused Docker Inspector to return the full container filesystem even when only application components are requested ( docker.platform.top.layer.id is specified).","title":"Resolved issues"},{"location":"releasenotes/#version-820","text":"","title":"Version 8.2.0"},{"location":"releasenotes/#new-features_1","text":"Added support for Java 11. Added the ability to generate help by topic (--help {topic}). Added the ability to generate help in HTML. Added the ability to write help output to a given file.","title":"New features"},{"location":"releasenotes/#version-816","text":"","title":"Version 8.1.6"},{"location":"releasenotes/#changed-feature","text":"Adjusted logging to ensure that sensitive information does not display in a debug log.","title":"Changed feature"},{"location":"releasenotes/#version-815","text":"","title":"Version 8.1.5"},{"location":"releasenotes/#resolved-issues_4","text":"Resolved an issue that could cause Docker Inspector to incorrectly identify the package manager of the target image.","title":"Resolved issues"},{"location":"releasenotes/#version-814","text":"","title":"Version 8.1.4"},{"location":"releasenotes/#new-features_2","text":"Added a GitLab continuous integration deployment example.","title":"New features"},{"location":"releasenotes/#version-813","text":"","title":"Version 8.1.3"},{"location":"releasenotes/#new-features_3","text":"Added a Travis continuous integration deployment example.","title":"New features"},{"location":"releasenotes/#version-812","text":"","title":"Version 8.1.2"},{"location":"releasenotes/#changed-features","text":"Updated blackduck-docker-inspector.sh to download the Docker Inspector .jar file from the new Artifactory repository at sig-repo.synopsys.com.","title":"Changed features"},{"location":"releasenotes/#version-811","text":"","title":"Version 8.1.1"},{"location":"releasenotes/#resolved-issues_5","text":"Resolved an issue that caused Docker Inspector to fail when it was unable to read the image inspector container log.","title":"Resolved issues"},{"location":"releasenotes/#version-810","text":"","title":"Version 8.1.0"},{"location":"releasenotes/#resolved-issues_6","text":"Resolved an issue that could cause a No such file error on files named classes.jsa when inspecting images containing Java.","title":"Resolved issues"},{"location":"releasenotes/#new-features_4","text":"Added the property output.containerfilesystem.excluded.paths . Added the command line switch --help=true for invoking help. Added the property output.include.squashedimage .","title":"New features"},{"location":"releasenotes/#version-802","text":"","title":"Version 8.0.2"},{"location":"releasenotes/#resolved-issues_7","text":"Resolved an issue that could cause missing components on Fedora-based Docker images.","title":"Resolved issues"},{"location":"releasenotes/#version-801","text":"","title":"Version 8.0.1"},{"location":"releasenotes/#resolved-issues_8","text":"Resolved an issue that could cause OpenSUSE components to be omitted from the Bill Of Materials.","title":"Resolved issues"},{"location":"releasenotes/#new-features_5","text":"Increased default image Inspector service timeout from two minutes to four minutes.","title":"New features"},{"location":"releasenotes/#version-800","text":"","title":"Version 8.0.0"},{"location":"releasenotes/#new-features_6","text":"Added the ability to collect only those components added to the image package manager database by your application layers, versus the platform layers on which your application is built. Added the ability to provide the full code location name.","title":"New features"},{"location":"releasenotes/#removed-features","text":"Docker exec mode (deprecated in Docker Inspector 7.0.0) is removed. Docker Inspector now supports HTTP client mode only.","title":"Removed features"},{"location":"releasenotes/#version-733","text":"","title":"Version 7.3.3"},{"location":"releasenotes/#resolved-issues_9","text":"Resolved an issue that could prevent controlling the image inspector HTTP request service timeout through the property service.timeout .","title":"Resolved issues"},{"location":"releasenotes/#version-732","text":"","title":"Version 7.3.2"},{"location":"releasenotes/#resolved-issues_10","text":"Resolved an issue that could cause RPM packages containing a value in the epoch field to be missing from the Black Duck Bill of Materials (BOM).","title":"Resolved issues"},{"location":"releasenotes/#version-731","text":"","title":"Version 7.3.1"},{"location":"releasenotes/#resolved-issues_11","text":"Resolved an issue that could cause Hub Detect versions 5.2.0 and higher to fail with an error message of DOCKER extraction failed: null when invoking Docker Inspector on a non-Linux Docker image.","title":"Resolved issues"},{"location":"releasenotes/#version-730","text":"","title":"Version 7.3.0"},{"location":"releasenotes/#new-features_7","text":"Added the property system.properties.path .","title":"New features"},{"location":"releasenotes/#version-724","text":"","title":"Version 7.2.4"},{"location":"releasenotes/#resolved-issues_12","text":"Resolved an issue that could cause Docker Inspector to fail with an error message of Error inspecting image: Failed to parse docker configuration file (Unrecognized field \"identitytoken\") .","title":"Resolved issues"},{"location":"releasenotes/#version-723","text":"","title":"Version 7.2.3"},{"location":"releasenotes/#changed-features_1","text":"When constructing the container file system with the logging level set to DEBUG or TRACE: after applying each image layer, Docker Inspector now logs contents of the layer's metadata (json) file and the list of components.","title":"Changed features"},{"location":"releasenotes/#version-722","text":"","title":"Version 7.2.2"},{"location":"releasenotes/#resolved-issues_13","text":"Resolved an issue that could cause Black Duck input/output data (BDIO) uploads to fail for openSUSE and Red Hat Docker images.","title":"Resolved issues"},{"location":"releasenotes/#version-721","text":"","title":"Version 7.2.1"},{"location":"releasenotes/#resolved-issues_14","text":"Resolved an issue that could cause the Black Duck BOM creation to fail with an error message of Error in MAPPING_COMPONENTS displayed on the Black Duck Scans page for certain images.","title":"Resolved issues"},{"location":"releasenotes/#version-720","text":"","title":"Version 7.2.0"},{"location":"releasenotes/#new-features_8","text":"Added offline mode.","title":"New features"},{"location":"releasenotes/#resolved-issues_15","text":"Resolved an issue that could generate a warning message of Error creating hard link to be logged when inspecting certain images. Resolved an issue that could generate a warning message of Error removing whited-out file .../.wh..opq to be logged when inspecting images with opaque directory whiteout files. Reduced the disk space used in the working directory within the Inspector containers.","title":"Resolved issues"},{"location":"releasenotes/#version-710","text":"","title":"Version 7.1.0"},{"location":"releasenotes/#changed-features_2","text":"Modified the format of the generated external identifiers to take advantage of the Black Duck KnowledgeBase preferred alias namespace feature. Modified the format of the generated external identifiers to include the epoch, when applicable, for RPM packages.","title":"Changed features"},{"location":"releasenotes/#version-701","text":"","title":"Version 7.0.1"},{"location":"releasenotes/#resolved-issues_16","text":"When the logging level is set to DEBUG or higher, the contents of the image inspector service log are now included in the log output. The image inspector service is now started with the same logging level as Black Duck Docker Inspector.","title":"Resolved issues"},{"location":"releasenotes/#version-700","text":"","title":"Version 7.0.0"},{"location":"releasenotes/#changed-features_3","text":"Hub Docker Inspector is now renamed to Black Duck Docker Inspector. The shell script, .jar filename, properties, and code blocks are updated accordingly. Black Duck Docker Inspector now runs in HTTP mode by default.","title":"Changed features"},{"location":"releasenotes/#resolved-issues_17","text":"HTTP client mode: Resolved an issue that prevents removal of the image inspector image upon completion. HTTP client mode: Resolved an issue with user-specified Black Duck project names and version names. HTTP client mode: Resolved an issue that caused the container filesystem to be provided even when it was not requested.","title":"Resolved issues"},{"location":"releasenotes/#version-631","text":"","title":"Version 6.3.1"},{"location":"releasenotes/#resolved-issues_18","text":"Resolved an issue that could cause DEBUG-level warnings to be logged while inspecting images with file paths containing non-ASCII characters. Improved logging for when the image inspector service is started but never comes online. In http client mode start service mode: if a health check fails, Docker Inspector now performs a docker logs operation on the container to reveal the root problem. Orchestration platform properties are now included in the --help output.","title":"Resolved issues"},{"location":"releasenotes/#version-630","text":"","title":"Version 6.3.0"},{"location":"releasenotes/#new-features_9","text":"Added the --inspectorimagefamily command line argument, which prints the Inspector image family name.","title":"New features"},{"location":"releasenotes/#version-620","text":"","title":"Version 6.2.0"},{"location":"releasenotes/#resolved-issues_19","text":"Resolved an issue that caused Docker Inspector to fail when the image repository contained a : character and the image tag was not specified.","title":"Resolved issues"},{"location":"releasenotes/#new-features_10","text":"Added the --pullairgapzip option. Improved error messages.","title":"New features"},{"location":"releasenotes/#version-610","text":"","title":"Version 6.1.0"},{"location":"releasenotes/#resolved-issues_20","text":"Added support for running on container application platforms such as Kubernetes and OpenShift. Renamed Rest Client Mode to HTTP Client Mode. Resolved an issue that prevented BDIO (Black Duck Input/Output data) from being uploaded to the Hub. This issue only impacted HTTP client mode. Resolved an issue that caused Docker Inspector to fail when inspecting an image containing no package manager. This issue only impacted HTTP client node.","title":"Resolved issues"},{"location":"releasenotes/#version-604","text":"","title":"Version 6.0.4"},{"location":"releasenotes/#resolved-issues_21","text":"Resolved an issue wherein Hub Docker Inspector may fail if the target Docker tarfile path contained spaces.","title":"Resolved issues"},{"location":"releasenotes/#version-603","text":"","title":"Version 6.0.3"},{"location":"releasenotes/#resolved-issues_22","text":"Resolved an issue causing Hub Docker Inspector to produce an unnecessarily large container filesystem output file.","title":"Resolved issues"},{"location":"releasenotes/#version-602","text":"","title":"Version 6.0.2"},{"location":"releasenotes/#resolved-issues_23","text":"Resolved an issue causing Hub Docker Inspector to fail when the image exists in the local cache but not the registry.","title":"Resolved issues"},{"location":"releasenotes/#version-601","text":"","title":"Version 6.0.1"},{"location":"releasenotes/#resolved-issues_24","text":"Removed extraneous and possibly misleading log messages.","title":"Resolved issues"},{"location":"releasenotes/#new-features_11","text":"Added the properties docker.image.repo and docker.image.tag to the usage message generated when using the command line argument --help .","title":"New features"},{"location":"releasenotes/#version-600","text":"","title":"Version 6.0.0"},{"location":"releasenotes/#new-features_12","text":"Added REST client mode.","title":"New features"},{"location":"releasenotes/#changed-features_4","text":"The available properties list included in the usage message, which displays when using the command line argument --help , is now sorted alphabetically. The format of the (optional) container filesystem output file name has changed. The new container system file name is {image name} {image tag} containerfilesystem.tar.gz or {image tarfilename}.tar.gz , depending on how the target image is specified.","title":"Changed features"},{"location":"running/","text":"Running the latest version The following command format always fetches and runs the latest version of Black Duck Docker Inspector: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) {Black Duck Docker Inspector arguments} For example: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --help bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --upload.bdio=false --docker.image=ubuntu An alternative is to download and run the latest Black Duck Docker Inspector script: curl -O https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh chmod +x blackduck-docker-inspector.sh ./blackduck-docker-inspector.sh {Black Duck Docker Inspector arguments} The advantage of using the Black Duck Docker Inspector script is that it ensures that you are always running the latest version of the Black Duck Docker Inspector .jar. Another alternative is to download the Black Duck Docker Inspector .jar (using the script) and run the .jar directly: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --pulljar java -jar blackduck-docker-inspector-{version}.jar {Black Duck Docker Inspector arguments} Running a specific version By default, blackduck-docker-inspector.sh runs the latest version of Black Duck Docker Inspector by downloading, if necessary, and running the latest Black Duck Docker Inspector .jar. To run a specific version of Black Duck Docker Inspector: export DOCKER_INSPECTOR_VERSION={version} ./blackduck-docker-inspector.sh {Black Duck Docker Inspector arguments} For example: export DOCKER_INSPECTOR_VERSION=8.1.0 ./blackduck-docker-inspector.sh --upload.bdio=false --docker.image=ubuntu:latest Running the .jar file The advantage of running blackduck-docker-inspector.sh is that it ensures that you always run the latest version of Black Duck Docker Inspector. However, sometimes it is better to run the .jar directly. You can download any version of the Black Duck Docker Inspector .jar from https://sig-repo.synopsys.com/webapp/#/artifacts/browse/tree/General/bds-integrations-release/com/synopsys/integration/blackduck-docker-inspector. Use the following Java command to run it: java -jar blackduck-docker-inspector-{version}.jar {Black Duck Docker Inspector arguments} Inspecting an image by image repo:tag To run Black Duck Docker Inspector on a Docker image from your local cache or a registry: ./blackduck-docker-inspector.sh --docker.image={repo}:{tag} If you omit the :{tag}, it defaults to :latest. Inspecting an image saved to a .tar file To run Black Duck Docker Inspector on a Docker image .tar file: docker save -o {name}.tar {repo}:{tag} ./blackduck-docker-inspector.sh --docker.tar={name}.tar If your tar file contains multiple images, Black Duck Docker Inspector can only inspect one of them. You can specify the image to inspect using --docker.image.repo and --docker.image.tag . For example, to select ubuntu:latest from a .tar file that contains ubuntu:latest and other images: ./blackduck-docker-inspector.sh --docker.tar=multipleimages.tar --docker.image.repo=ubuntu --docker.image.tag=latest Inspecting a local image by image ID When inspecting a local image, you have the option of specifying the image by its ID. First, get the image ID from the IMAGE ID column of the output of the docker images command. Then use the docker.image.id property to pass the image ID to Black Duck Docker Inspector: ./blackduck-docker-inspector.sh --docker.image.id={image ID} The method only works for local images.","title":"Running"},{"location":"running/#running-the-latest-version","text":"The following command format always fetches and runs the latest version of Black Duck Docker Inspector: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) {Black Duck Docker Inspector arguments} For example: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --help bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --upload.bdio=false --docker.image=ubuntu An alternative is to download and run the latest Black Duck Docker Inspector script: curl -O https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh chmod +x blackduck-docker-inspector.sh ./blackduck-docker-inspector.sh {Black Duck Docker Inspector arguments} The advantage of using the Black Duck Docker Inspector script is that it ensures that you are always running the latest version of the Black Duck Docker Inspector .jar. Another alternative is to download the Black Duck Docker Inspector .jar (using the script) and run the .jar directly: bash (curl -s https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh) --pulljar java -jar blackduck-docker-inspector-{version}.jar {Black Duck Docker Inspector arguments}","title":"Running the latest version"},{"location":"running/#running-a-specific-version","text":"By default, blackduck-docker-inspector.sh runs the latest version of Black Duck Docker Inspector by downloading, if necessary, and running the latest Black Duck Docker Inspector .jar. To run a specific version of Black Duck Docker Inspector: export DOCKER_INSPECTOR_VERSION={version} ./blackduck-docker-inspector.sh {Black Duck Docker Inspector arguments} For example: export DOCKER_INSPECTOR_VERSION=8.1.0 ./blackduck-docker-inspector.sh --upload.bdio=false --docker.image=ubuntu:latest","title":"Running a specific version"},{"location":"running/#running-the-jar-file","text":"The advantage of running blackduck-docker-inspector.sh is that it ensures that you always run the latest version of Black Duck Docker Inspector. However, sometimes it is better to run the .jar directly. You can download any version of the Black Duck Docker Inspector .jar from https://sig-repo.synopsys.com/webapp/#/artifacts/browse/tree/General/bds-integrations-release/com/synopsys/integration/blackduck-docker-inspector. Use the following Java command to run it: java -jar blackduck-docker-inspector-{version}.jar {Black Duck Docker Inspector arguments}","title":"Running the .jar file"},{"location":"running/#inspecting-an-image-by-image-repotag","text":"To run Black Duck Docker Inspector on a Docker image from your local cache or a registry: ./blackduck-docker-inspector.sh --docker.image={repo}:{tag} If you omit the :{tag}, it defaults to :latest.","title":"Inspecting an image by image repo:tag"},{"location":"running/#inspecting-an-image-saved-to-a-tar-file","text":"To run Black Duck Docker Inspector on a Docker image .tar file: docker save -o {name}.tar {repo}:{tag} ./blackduck-docker-inspector.sh --docker.tar={name}.tar If your tar file contains multiple images, Black Duck Docker Inspector can only inspect one of them. You can specify the image to inspect using --docker.image.repo and --docker.image.tag . For example, to select ubuntu:latest from a .tar file that contains ubuntu:latest and other images: ./blackduck-docker-inspector.sh --docker.tar=multipleimages.tar --docker.image.repo=ubuntu --docker.image.tag=latest","title":"Inspecting an image saved to a .tar file"},{"location":"running/#inspecting-a-local-image-by-image-id","text":"When inspecting a local image, you have the option of specifying the image by its ID. First, get the image ID from the IMAGE ID column of the output of the docker images command. Then use the docker.image.id property to pass the image ID to Black Duck Docker Inspector: ./blackduck-docker-inspector.sh --docker.image.id={image ID} The method only works for local images.","title":"Inspecting a local image by image ID"},{"location":"troubleshooting/","text":"Troubleshooting overview To troubleshoot issues with Black Duck Docker Inspector, run with DEBUG logging: --logging.level.com.synopsys=DEBUG The following suggestions are related to specific problems. Problem: When directly invoking the .jar file, an error message displays \"Malformed input or input contains unmappable characters.\" Possible cause: Your local character encoding does not match the target container file system character encoding. Solution/workaround: Set the character encoding to UTF-8 when invoking Java: java -Dfile.encoding=UTF-8 ... Problem: You must run Black Duck Docker Inspector on a non-Linux computer. Solution/workaround: You may be able to run Black Duck Docker Inspector within a Linux Docker container running on your non-Linux computer using the following process. Warning: This method involves running a privileged container which will not be acceptable in some environments. On your non-Linux computer, run: docker run -it -d --name inspectorhost --privileged blackducksoftware/blackduck-imageinspector-ubuntu:3.0.0 docker attach inspectorhost Then, in the inspectorhost container, run: mkdir -p /opt/blackduck/dockerinspector cd /opt/blackduck/dockerinspector apt-get update apt-get install -y apt-transport-https ca-certificates curl software-properties-common default-jre vim curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" apt-get install -y docker-ce dockerd --storage-driver=vfs curl -O https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh; chmod +x blackduck-docker-inspector.sh dockerd --storage-driver=vfs 2 dockerd_stderr.log dockerd_stdout.log ./blackduck-docker-inspector.sh ... It's possible that additional steps such as configuration of dockerd, logging into the Docker registry, and others, are required to give Docker running inside the inspectorhost container access to the Docker images that Black Duck Docker Inspector must pull. One way to reduce extra steps is to save the target Docker image as a .tar file on your computer, use docker cp to copy it into the container, and run Black Duck Docker Inspector on that .tar file. Problem: Property values are set in unexpected ways. Possible cause: Black Duck Docker Inspector is built using the Spring Boot application framework. Spring Boot provides a variety of ways to set property values. This can produce unexpected results if, for example, you have an environment variable whose name maps to a Black Duck Docker Inspector property name. Refer to the Spring Boot documentation for more details. Problem: The image inspector service cannot write to the mounted volume; SELinux is enabled. When this happens, the following error may appear in the container log: Exception thrown while getting image packages: Error inspecting image: /opt/blackduck/shared/run_.../output/..._containerfilesystem.tar.gz (Permission denied) ... Caused by: java.io.FileNotFoundException: /opt/blackduck/hub-imageinspector-ws/shared/run_.../output/..._containerfilesystem.tar.gz (Permission denied) Possible cause: SELinux policy configuration. Solution/workaround: Add the svirt_sandbox_file_t label to Black Duck Docker Inspector's shared directory. This enables the Black Duck Docker Inspector services running in Docker containers to write to it: sudo chcon -Rt svirt_sandbox_file_t /tmp/blackduck-docker-inspector-files/shared/ Problem: The image inspector service cannot read from the mounted volume. When this happens, the following error may appear in the container log: Error inspecting image: /opt/blackduck/shared/run_.../{image}.tar (Permission denied) Possible cause: The Linux umask value on the machine running Black Duck Docker Inspector is too restrictive. Solution/workaround: Set the umask value to 022 when running Black Duck Docker Inspector. The cause could be a umask value that prevents read access to the file, or read or execute access to the directory. Black Duck Docker Inspector requires a umask value that does not remove read permissions from files and does not remove read or execute permissions from directories. For example, a umask value of 022 works. Problem: Black Duck Docker Inspector cannot perform Docker operations because the remote access port is not enabled on the Docker engine. When this happens, the following error may display in the log: Error inspecting image: java.io.IOException: Couldn't load native library Stack trace: javax.ws.rs.ProcessingException: java.io.IOException: Couldn't load native library In versions of Black Duck Docker Inspector prior to 8.2.0, the logged error was: Error inspecting image: Could not initialize class org.newsclub.net.unix.NativeUnixSocket Stack trace: java.lang.NoClassDefFoundError: Could not initialize class org.newsclub.net.unix.NativeUnixSocket Possible cause: The TCP socket for remote access is not enabled on the Docker engine. For more information, refer to Docker documentation . Solution/workaround: Follow the instructions in the Docker documentation to open the TCP port on the Docker engine.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting-overview","text":"To troubleshoot issues with Black Duck Docker Inspector, run with DEBUG logging: --logging.level.com.synopsys=DEBUG The following suggestions are related to specific problems.","title":"Troubleshooting overview"},{"location":"troubleshooting/#problem-when-directly-invoking-the-jar-file-an-error-message-displays-malformed-input-or-input-contains-unmappable-characters","text":"Possible cause: Your local character encoding does not match the target container file system character encoding. Solution/workaround: Set the character encoding to UTF-8 when invoking Java: java -Dfile.encoding=UTF-8 ...","title":"Problem: When directly invoking the .jar file, an error message displays \"Malformed input or input contains unmappable characters.\""},{"location":"troubleshooting/#problem-you-must-run-black-duck-docker-inspector-on-a-non-linux-computer","text":"Solution/workaround: You may be able to run Black Duck Docker Inspector within a Linux Docker container running on your non-Linux computer using the following process. Warning: This method involves running a privileged container which will not be acceptable in some environments. On your non-Linux computer, run: docker run -it -d --name inspectorhost --privileged blackducksoftware/blackduck-imageinspector-ubuntu:3.0.0 docker attach inspectorhost Then, in the inspectorhost container, run: mkdir -p /opt/blackduck/dockerinspector cd /opt/blackduck/dockerinspector apt-get update apt-get install -y apt-transport-https ca-certificates curl software-properties-common default-jre vim curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" apt-get install -y docker-ce dockerd --storage-driver=vfs curl -O https://blackducksoftware.github.io/blackduck-docker-inspector/blackduck-docker-inspector.sh; chmod +x blackduck-docker-inspector.sh dockerd --storage-driver=vfs 2 dockerd_stderr.log dockerd_stdout.log ./blackduck-docker-inspector.sh ... It's possible that additional steps such as configuration of dockerd, logging into the Docker registry, and others, are required to give Docker running inside the inspectorhost container access to the Docker images that Black Duck Docker Inspector must pull. One way to reduce extra steps is to save the target Docker image as a .tar file on your computer, use docker cp to copy it into the container, and run Black Duck Docker Inspector on that .tar file.","title":"Problem: You must run Black Duck Docker Inspector on a non-Linux computer."},{"location":"troubleshooting/#problem-property-values-are-set-in-unexpected-ways","text":"Possible cause: Black Duck Docker Inspector is built using the Spring Boot application framework. Spring Boot provides a variety of ways to set property values. This can produce unexpected results if, for example, you have an environment variable whose name maps to a Black Duck Docker Inspector property name. Refer to the Spring Boot documentation for more details.","title":"Problem: Property values are set in unexpected ways."},{"location":"troubleshooting/#problem-the-image-inspector-service-cannot-write-to-the-mounted-volume-selinux-is-enabled","text":"When this happens, the following error may appear in the container log: Exception thrown while getting image packages: Error inspecting image: /opt/blackduck/shared/run_.../output/..._containerfilesystem.tar.gz (Permission denied) ... Caused by: java.io.FileNotFoundException: /opt/blackduck/hub-imageinspector-ws/shared/run_.../output/..._containerfilesystem.tar.gz (Permission denied) Possible cause: SELinux policy configuration. Solution/workaround: Add the svirt_sandbox_file_t label to Black Duck Docker Inspector's shared directory. This enables the Black Duck Docker Inspector services running in Docker containers to write to it: sudo chcon -Rt svirt_sandbox_file_t /tmp/blackduck-docker-inspector-files/shared/","title":"Problem: The image inspector service cannot write to the mounted volume; SELinux is enabled."},{"location":"troubleshooting/#problem-the-image-inspector-service-cannot-read-from-the-mounted-volume","text":"When this happens, the following error may appear in the container log: Error inspecting image: /opt/blackduck/shared/run_.../{image}.tar (Permission denied) Possible cause: The Linux umask value on the machine running Black Duck Docker Inspector is too restrictive. Solution/workaround: Set the umask value to 022 when running Black Duck Docker Inspector. The cause could be a umask value that prevents read access to the file, or read or execute access to the directory. Black Duck Docker Inspector requires a umask value that does not remove read permissions from files and does not remove read or execute permissions from directories. For example, a umask value of 022 works.","title":"Problem: The image inspector service cannot read from the mounted volume."},{"location":"troubleshooting/#problem-black-duck-docker-inspector-cannot-perform-docker-operations-because-the-remote-access-port-is-not-enabled-on-the-docker-engine","text":"When this happens, the following error may display in the log: Error inspecting image: java.io.IOException: Couldn't load native library Stack trace: javax.ws.rs.ProcessingException: java.io.IOException: Couldn't load native library In versions of Black Duck Docker Inspector prior to 8.2.0, the logged error was: Error inspecting image: Could not initialize class org.newsclub.net.unix.NativeUnixSocket Stack trace: java.lang.NoClassDefFoundError: Could not initialize class org.newsclub.net.unix.NativeUnixSocket Possible cause: The TCP socket for remote access is not enabled on the Docker engine. For more information, refer to Docker documentation . Solution/workaround: Follow the instructions in the Docker documentation to open the TCP port on the Docker engine.","title":"Problem: Black Duck Docker Inspector cannot perform Docker operations because the remote access port is not enabled on the Docker engine."}]}